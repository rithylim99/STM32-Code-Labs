
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007338  08007338  00017338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076f4  080076f4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080076f4  080076f4  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076f4  080076f4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080076fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          0000059c  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000774  20000774  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   000133f6  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000311c  00000000  00000000  00033641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fa0  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c01  00000000  00000000  00037700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fcf3  00000000  00000000  00038301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016fc7  00000000  00000000  00057ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b5acb  00000000  00000000  0006efbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004fdc  00000000  00000000  00124a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00129a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800731c 	.word	0x0800731c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800731c 	.word	0x0800731c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a2a      	ldr	r2, [pc, #168]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_GPIO_Init+0xf4>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c36:	2200      	movs	r2, #0
 8000c38:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000c3c:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000c3e:	f000 ff81 	bl	8001b44 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000c42:	2337      	movs	r3, #55	; 0x37
 8000c44:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000c58:	f000 fdfa 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c5c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000c60:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000c76:	f000 fdeb 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f000 fdde 	bl	8001850 <HAL_GPIO_Init>

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48001000 	.word	0x48001000

08000ca4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_I2C1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <MX_I2C1_Init+0x7c>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000ce0:	f000 ff48 	bl	8001b74 <HAL_I2C_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 f8fb 	bl	8000ee4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cf2:	f000 ffce 	bl	8001c92 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 f8f2 	bl	8000ee4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000d04:	f001 f810 	bl	8001d28 <HAL_I2CEx_ConfigDigitalFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 f8e9 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200001f4 	.word	0x200001f4
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	2000090e 	.word	0x2000090e

08000d24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_I2C_MspInit+0x7c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d127      	bne.n	8000d96 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_I2C_MspInit+0x80>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <HAL_I2C_MspInit+0x80>)
 8000d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_I2C_MspInit+0x80>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d5e:	23c0      	movs	r3, #192	; 0xc0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <HAL_I2C_MspInit+0x84>)
 8000d7a:	f000 fd69 	bl	8001850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_I2C_MspInit+0x80>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_I2C_MspInit+0x80>)
 8000d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_I2C_MspInit+0x80>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000400 	.word	0x48000400

08000dac <_write>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int _write(int file, char* p, int len){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <_write+0x24>)
 8000dc2:	f002 fdec 	bl	800399e <HAL_UART_Transmit>
	return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]

}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200002b0 	.word	0x200002b0

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd8:	f000 fb28 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ddc:	f000 f81e 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de0:	f7ff fee2 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000de4:	f7ff ff5e 	bl	8000ca4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000de8:	f000 f882 	bl	8000ef0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000dec:	f000 fa8e 	bl	800130c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000df0:	f000 fa12 	bl	8001218 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("The float = %f \n\r",num);
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <main+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fba5 	bl	8000548 <__aeabi_f2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <main+0x44>)
 8000e04:	f004 fae2 	bl	80053cc <iprintf>
	  HAL_Delay(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0c:	f000 fb74 	bl	80014f8 <HAL_Delay>
	  printf("The float = %f \n\r",num);
 8000e10:	e7f0      	b.n	8000df4 <main+0x20>
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000
 8000e18:	08007338 	.word	0x08007338

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09e      	sub	sp, #120	; 0x78
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e26:	2228      	movs	r2, #40	; 0x28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fb23 	bl	8005476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	223c      	movs	r2, #60	; 0x3c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fb15 	bl	8005476 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e70:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f874 	bl	8001f64 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e82:	f000 f82f 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	230f      	movs	r3, #15
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 f89c 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eae:	f000 f819 	bl	8000ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <SystemClock_Config+0xc4>)
 8000eb4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fac0 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ed2:	f000 f807 	bl	8000ee4 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3778      	adds	r7, #120	; 0x78
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	00020022 	.word	0x00020022

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <MX_SPI1_Init+0x78>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f26:	2208      	movs	r2, #8
 8000f28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_SPI1_Init+0x74>)
 8000f50:	f002 fc2c 	bl	80037ac <HAL_SPI_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f5a:	f7ff ffc3 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000248 	.word	0x20000248
 8000f68:	40013000 	.word	0x40013000

08000f6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_SPI_MspInit+0x7c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d128      	bne.n	8000fe0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000fbe:	23e0      	movs	r3, #224	; 0xe0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f000 fc38 	bl	8001850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013000 	.word	0x40013000
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x44>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x44>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x44>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001026:	2007      	movs	r0, #7
 8001028:	f000 fb5a 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 fa18 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <USART2_IRQHandler+0x10>)
 8001092:	f002 fd0f 	bl	8003ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002b0 	.word	0x200002b0

080010a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return 1;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_kill>:

int _kill(int pid, int sig)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ba:	f004 fa2f 	bl	800551c <__errno>
 80010be:	4603      	mov	r3, r0
 80010c0:	2216      	movs	r2, #22
 80010c2:	601a      	str	r2, [r3, #0]
  return -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_exit>:

void _exit (int status)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffe7 	bl	80010b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010e2:	e7fe      	b.n	80010e2 <_exit+0x12>

080010e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e00a      	b.n	800110c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f6:	f3af 8000 	nop.w
 80010fa:	4601      	mov	r1, r0
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf0      	blt.n	80010f6 <_read+0x12>
  }

  return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:
  }
  return len;
}

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001146:	605a      	str	r2, [r3, #4]
  return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_isatty>:

int _isatty(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f004 f9b0 	bl	800551c <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000a000 	.word	0x2000a000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200002ac 	.word	0x200002ac
 80011f0:	20000778 	.word	0x20000778

080011f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <MX_USART2_UART_Init+0x5c>)
 8001220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800125c:	f002 fb51 	bl	8003902 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001266:	f7ff fe3d 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200002b0 	.word	0x200002b0
 8001274:	40004400 	.word	0x40004400

08001278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_UART_MspInit+0x8c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d130      	bne.n	80012fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_UART_MspInit+0x90>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	6153      	str	r3, [r2, #20]
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ca:	230c      	movs	r3, #12
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f000 fab2 	bl	8001850 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2026      	movs	r0, #38	; 0x26
 80012f2:	f000 fa00 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f6:	2026      	movs	r0, #38	; 0x26
 80012f8:	f000 fa19 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40004400 	.word	0x40004400
 8001308:	40021000 	.word	0x40021000

0800130c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <MX_USB_PCD_Init+0x40>)
 8001314:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 8001318:	2208      	movs	r2, #8
 800131a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 800131e:	2202      	movs	r2, #2
 8001320:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 8001324:	2202      	movs	r2, #2
 8001326:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_USB_PCD_Init+0x3c>)
 8001336:	f000 fd43 	bl	8001dc0 <HAL_PCD_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001340:	f7ff fdd0 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000338 	.word	0x20000338
 800134c:	40005c00 	.word	0x40005c00

08001350 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_PCD_MspInit+0x80>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d129      	bne.n	80013c6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_PCD_MspInit+0x84>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_PCD_MspInit+0x84>)
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	6153      	str	r3, [r2, #20]
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_PCD_MspInit+0x84>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800138a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800139c:	230e      	movs	r3, #14
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f000 fa51 	bl	8001850 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_PCD_MspInit+0x84>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_PCD_MspInit+0x84>)
 80013b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_PCD_MspInit+0x84>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40005c00 	.word	0x40005c00
 80013d4:	40021000 	.word	0x40021000

080013d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013dc:	f7ff ff0a 	bl	80011f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	; (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	; (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001406:	f004 f88f 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140a:	f7ff fce3 	bl	8000dd4 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001410:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800141c:	080076fc 	.word	0x080076fc
  ldr r2, =_sbss
 8001420:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001424:	20000774 	.word	0x20000774

08001428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC1_2_IRQHandler>
	...

0800142c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_Init+0x28>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_Init+0x28>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f94f 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fdd2 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000

08001458 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f967 	bl	800174a <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f92f 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000004 	.word	0x20000004
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	20000624 	.word	0x20000624

080014e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000624 	.word	0x20000624

080014f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff29 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff3e 	bl	8001588 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff31 	bl	80015a4 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffa2 	bl	800169c <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001770:	2b02      	cmp	r3, #2
 8001772:	d008      	beq.n	8001786 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2204      	movs	r2, #4
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e020      	b.n	80017c8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020e 	bic.w	r2, r2, #14
 8001794:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0201 	bic.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d005      	beq.n	80017f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2204      	movs	r2, #4
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e027      	b.n	8001846 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 020e 	bic.w	r2, r2, #14
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
    } 
  }
  return status;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e154      	b.n	8001b0a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8146 	beq.w	8001b04 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d005      	beq.n	8001890 <HAL_GPIO_Init+0x40>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d017      	beq.n	800192e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d123      	bne.n	8001982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a0 	beq.w	8001b04 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_GPIO_Init+0x2d8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a57      	ldr	r2, [pc, #348]	; (8001b28 <HAL_GPIO_Init+0x2d8>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <HAL_GPIO_Init+0x2d8>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019dc:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a06:	d019      	beq.n	8001a3c <HAL_GPIO_Init+0x1ec>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_GPIO_Init+0x2e0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1e8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2e4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1e4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_GPIO_Init+0x2ec>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1dc>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5c:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a80:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f aea3 	bne.w	8001860 <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e081      	b.n	8001c8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff f8c2 	bl	8000d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e006      	b.n	8001bfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d104      	bne.n	8001c0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69d9      	ldr	r1, [r3, #28]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1a      	ldr	r2, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d138      	bne.n	8001d1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e032      	b.n	8001d1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2224      	movs	r2, #36	; 0x24
 8001cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6819      	ldr	r1, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d139      	bne.n	8001db2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e033      	b.n	8001db4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af06      	add	r7, sp, #24
 8001dc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0c4      	b.n	8001f5c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fab2 	bl	8001350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fd94 	bl	8004926 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e040      	b.n	8001e86 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3301      	adds	r3, #1
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3303      	adds	r3, #3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	3338      	adds	r3, #56	; 0x38
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	333c      	adds	r3, #60	; 0x3c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	3340      	adds	r3, #64	; 0x40
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d3b9      	bcc.n	8001e04 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e044      	b.n	8001f20 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3b5      	bcc.n	8001e96 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	687e      	ldr	r6, [r7, #4]
 8001f32:	466d      	mov	r5, sp
 8001f34:	f106 0410 	add.w	r4, r6, #16
 8001f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	602b      	str	r3, [r5, #0]
 8001f40:	1d33      	adds	r3, r6, #4
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	6838      	ldr	r0, [r7, #0]
 8001f46:	f002 fd09 	bl	800495c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f001 b823 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 817d 	beq.w	800229a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fa0:	4bbc      	ldr	r3, [pc, #752]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00c      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fac:	4bb9      	ldr	r3, [pc, #740]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d15c      	bne.n	8002072 <HAL_RCC_OscConfig+0x10e>
 8001fb8:	4bb6      	ldr	r3, [pc, #728]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d155      	bne.n	8002072 <HAL_RCC_OscConfig+0x10e>
 8001fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x94>
 8001ff2:	4ba8      	ldr	r3, [pc, #672]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e015      	b.n	8002024 <HAL_RCC_OscConfig+0xc0>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002014:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002020:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002028:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800202c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002038:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 811f 	beq.w	8002298 <HAL_RCC_OscConfig+0x334>
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8116 	bne.w	8002298 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f000 bfaf 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x12e>
 8002084:	4b83      	ldr	r3, [pc, #524]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a82      	ldr	r2, [pc, #520]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 800208a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e036      	b.n	8002100 <HAL_RCC_OscConfig+0x19c>
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x158>
 80020a2:	4b7c      	ldr	r3, [pc, #496]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7b      	ldr	r2, [pc, #492]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b79      	ldr	r3, [pc, #484]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a78      	ldr	r2, [pc, #480]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e021      	b.n	8002100 <HAL_RCC_OscConfig+0x19c>
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x184>
 80020ce:	4b71      	ldr	r3, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a70      	ldr	r2, [pc, #448]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6e      	ldr	r3, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6d      	ldr	r2, [pc, #436]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0x19c>
 80020e8:	4b6a      	ldr	r3, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a69      	ldr	r2, [pc, #420]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b67      	ldr	r3, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a66      	ldr	r2, [pc, #408]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002100:	4b64      	ldr	r3, [pc, #400]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	f023 020f 	bic.w	r2, r3, #15
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	495f      	ldr	r1, [pc, #380]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8002116:	4313      	orrs	r3, r2
 8002118:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d059      	beq.n	80021de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff f9d9 	bl	80014e0 <HAL_GetTick>
 800212e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e00a      	b.n	800214a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff f9d4 	bl	80014e0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d902      	bls.n	800214a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	f000 bf43 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
 800214a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800215e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_RCC_OscConfig+0x218>
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e015      	b.n	80021a8 <HAL_RCC_OscConfig+0x244>
 800217c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002180:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002194:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002198:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80021c0:	fab2 f282 	clz	r2, r2
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f042 0220 	orr.w	r2, r2, #32
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f002 021f 	and.w	r2, r2, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f202 	lsl.w	r2, r1, r2
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ab      	beq.n	8002134 <HAL_RCC_OscConfig+0x1d0>
 80021dc:	e05d      	b.n	800229a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7ff f97f 	bl	80014e0 <HAL_GetTick>
 80021e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f97a 	bl	80014e0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b64      	cmp	r3, #100	; 0x64
 80021f6:	d902      	bls.n	80021fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	f000 bee9 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
 80021fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002202:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002212:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x2cc>
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e015      	b.n	800225c <HAL_RCC_OscConfig+0x2f8>
 8002230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002234:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800224c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_RCC_OscConfig+0x330>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002260:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002264:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002270:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f002 021f 	and.w	r2, r2, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ab      	bne.n	80021e8 <HAL_RCC_OscConfig+0x284>
 8002290:	e003      	b.n	800229a <HAL_RCC_OscConfig+0x336>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 817d 	beq.w	80025aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022b0:	4ba6      	ldr	r3, [pc, #664]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022bc:	4ba3      	ldr	r3, [pc, #652]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d172      	bne.n	80023ae <HAL_RCC_OscConfig+0x44a>
 80022c8:	4ba0      	ldr	r3, [pc, #640]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d16c      	bne.n	80023ae <HAL_RCC_OscConfig+0x44a>
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x3a0>
 80022fe:	4b93      	ldr	r3, [pc, #588]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e013      	b.n	800232c <HAL_RCC_OscConfig+0x3c8>
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800231c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2202      	movs	r2, #2
 800232e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002332:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002336:	fa92 f2a2 	rbit	r2, r2
 800233a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800233e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002342:	fab2 f282 	clz	r2, r2
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f042 0220 	orr.w	r2, r2, #32
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f002 021f 	and.w	r2, r2, #31
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCC_OscConfig+0x410>
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d002      	beq.n	8002374 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	f000 be2e 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b75      	ldr	r3, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	21f8      	movs	r1, #248	; 0xf8
 800238a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002392:	fa91 f1a1 	rbit	r1, r1
 8002396:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800239a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800239e:	fab1 f181 	clz	r1, r1
 80023a2:	b2c9      	uxtb	r1, r1
 80023a4:	408b      	lsls	r3, r1
 80023a6:	4969      	ldr	r1, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ac:	e0fd      	b.n	80025aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8088 	beq.w	80024d0 <HAL_RCC_OscConfig+0x56c>
 80023c0:	2301      	movs	r3, #1
 80023c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	461a      	mov	r2, r3
 80023e8:	2301      	movs	r3, #1
 80023ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff f878 	bl	80014e0 <HAL_GetTick>
 80023f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7ff f873 	bl	80014e0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d902      	bls.n	800240c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	f000 bde2 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
 800240c:	2302      	movs	r3, #2
 800240e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800241e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0x4d8>
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x500>
 800243c:	2302      	movs	r3, #2
 800243e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800244e:	2302      	movs	r3, #2
 8002450:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002454:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2202      	movs	r2, #2
 8002466:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800246a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800246e:	fa92 f2a2 	rbit	r2, r2
 8002472:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002476:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0af      	beq.n	80023f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	21f8      	movs	r1, #248	; 0xf8
 80024ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024b4:	fa91 f1a1 	rbit	r1, r1
 80024b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024c0:	fab1 f181 	clz	r1, r1
 80024c4:	b2c9      	uxtb	r1, r1
 80024c6:	408b      	lsls	r3, r1
 80024c8:	4920      	ldr	r1, [pc, #128]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
 80024ce:	e06c      	b.n	80025aa <HAL_RCC_OscConfig+0x646>
 80024d0:	2301      	movs	r3, #1
 80024d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fff0 	bl	80014e0 <HAL_GetTick>
 8002500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe ffeb 	bl	80014e0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d902      	bls.n	800251c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	f000 bd5a 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
 800251c:	2302      	movs	r3, #2
 800251e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800252e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d104      	bne.n	8002550 <HAL_RCC_OscConfig+0x5ec>
 8002546:	4b01      	ldr	r3, [pc, #4]	; (800254c <HAL_RCC_OscConfig+0x5e8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	e015      	b.n	8002578 <HAL_RCC_OscConfig+0x614>
 800254c:	40021000 	.word	0x40021000
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002562:	2302      	movs	r3, #2
 8002564:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002574:	4bc8      	ldr	r3, [pc, #800]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2202      	movs	r2, #2
 800257a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800257e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800258a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0220 	orr.w	r2, r2, #32
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ad      	bne.n	8002506 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8110 	beq.w	80027e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d079      	beq.n	80026c4 <HAL_RCC_OscConfig+0x760>
 80025d0:	2301      	movs	r3, #1
 80025d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	4bab      	ldr	r3, [pc, #684]	; (800289c <HAL_RCC_OscConfig+0x938>)
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	461a      	mov	r2, r3
 80025f6:	2301      	movs	r3, #1
 80025f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe ff71 	bl	80014e0 <HAL_GetTick>
 80025fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002604:	f7fe ff6c 	bl	80014e0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d902      	bls.n	800261a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	f000 bcdb 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002658:	2202      	movs	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002672:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 8002676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002680:	2102      	movs	r1, #2
 8002682:	6019      	str	r1, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f1a3 	rbit	r1, r3
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800269a:	6019      	str	r1, [r3, #0]
  return result;
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0a0      	beq.n	8002604 <HAL_RCC_OscConfig+0x6a0>
 80026c2:	e08d      	b.n	80027e0 <HAL_RCC_OscConfig+0x87c>
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026e6:	601a      	str	r2, [r3, #0]
  return result;
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x938>)
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	461a      	mov	r2, r3
 8002702:	2300      	movs	r3, #0
 8002704:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe feeb 	bl	80014e0 <HAL_GetTick>
 800270a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe fee6 	bl	80014e0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d902      	bls.n	8002726 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	f000 bc55 	b.w	8002fd0 <HAL_RCC_OscConfig+0x106c>
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002790:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 8002794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800279e:	2102      	movs	r1, #2
 80027a0:	6019      	str	r1, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f1a3 	rbit	r1, r3
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027b8:	6019      	str	r1, [r3, #0]
  return result;
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d197      	bne.n	8002710 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 81a1 	beq.w	8002b38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d116      	bne.n	8002836 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	61d3      	str	r3, [r2, #28]
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800282e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_RCC_OscConfig+0x93c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11a      	bne.n	8002878 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_RCC_OscConfig+0x93c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_RCC_OscConfig+0x93c>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7fe fe47 	bl	80014e0 <HAL_GetTick>
 8002852:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002856:	e009      	b.n	800286c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe fe42 	bl	80014e0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b64      	cmp	r3, #100	; 0x64
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e3b1      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_RCC_OscConfig+0x93c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10d      	bne.n	80028a4 <HAL_RCC_OscConfig+0x940>
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a02      	ldr	r2, [pc, #8]	; (8002898 <HAL_RCC_OscConfig+0x934>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e03c      	b.n	8002910 <HAL_RCC_OscConfig+0x9ac>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	10908120 	.word	0x10908120
 80028a0:	40007000 	.word	0x40007000
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10c      	bne.n	80028ce <HAL_RCC_OscConfig+0x96a>
 80028b4:	4bc1      	ldr	r3, [pc, #772]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4ac0      	ldr	r2, [pc, #768]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	6213      	str	r3, [r2, #32]
 80028c0:	4bbe      	ldr	r3, [pc, #760]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4abd      	ldr	r2, [pc, #756]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028c6:	f023 0304 	bic.w	r3, r3, #4
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	e020      	b.n	8002910 <HAL_RCC_OscConfig+0x9ac>
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x994>
 80028de:	4bb7      	ldr	r3, [pc, #732]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4ab6      	ldr	r2, [pc, #728]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6213      	str	r3, [r2, #32]
 80028ea:	4bb4      	ldr	r3, [pc, #720]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4ab3      	ldr	r2, [pc, #716]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0x9ac>
 80028f8:	4bb0      	ldr	r3, [pc, #704]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4aaf      	ldr	r2, [pc, #700]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	4bad      	ldr	r3, [pc, #692]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4aac      	ldr	r2, [pc, #688]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8081 	beq.w	8002a24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe fddd 	bl	80014e0 <HAL_GetTick>
 8002926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe fdd8 	bl	80014e0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e345      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800298a:	601a      	str	r2, [r3, #0]
  return result;
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002994:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0xa4c>
 80029aa:	4b84      	ldr	r3, [pc, #528]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	e013      	b.n	80029d8 <HAL_RCC_OscConfig+0xa74>
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029e0:	2102      	movs	r1, #2
 80029e2:	6011      	str	r1, [r2, #0]
 80029e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	fa92 f1a2 	rbit	r1, r2
 80029f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029fa:	6011      	str	r1, [r2, #0]
  return result;
 80029fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	fab2 f282 	clz	r2, r2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f002 021f 	and.w	r2, r2, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d084      	beq.n	800292c <HAL_RCC_OscConfig+0x9c8>
 8002a22:	e07f      	b.n	8002b24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7fe fd5c 	bl	80014e0 <HAL_GetTick>
 8002a28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fd57 	bl	80014e0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e2c4      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a4e:	2202      	movs	r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a72:	2202      	movs	r2, #2
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a8c:	601a      	str	r2, [r3, #0]
  return result;
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xb4e>
 8002aac:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	e013      	b.n	8002ada <HAL_RCC_OscConfig+0xb76>
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ade:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	6011      	str	r1, [r2, #0]
 8002ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	fa92 f1a2 	rbit	r1, r2
 8002af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002afc:	6011      	str	r1, [r2, #0]
  return result;
 8002afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	fab2 f282 	clz	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f002 021f 	and.w	r2, r2, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d184      	bne.n	8002a2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8242 	beq.w	8002fce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_RCC_OscConfig+0xc58>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	f000 8213 	beq.w	8002f7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f040 8162 	bne.w	8002e2e <HAL_RCC_OscConfig+0xeca>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b8e:	601a      	str	r2, [r3, #0]
  return result;
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	461a      	mov	r2, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fc96 	bl	80014e0 <HAL_GetTick>
 8002bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e00c      	b.n	8002bd4 <HAL_RCC_OscConfig+0xc70>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fc8e 	bl	80014e0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1fd      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bf8:	601a      	str	r2, [r3, #0]
  return result;
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_OscConfig+0xcba>
 8002c18:	4bb0      	ldr	r3, [pc, #704]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e027      	b.n	8002c6e <HAL_RCC_OscConfig+0xd0a>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f2a3 	rbit	r2, r3
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	4b9c      	ldr	r3, [pc, #624]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c7a:	6011      	str	r1, [r2, #0]
 8002c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	fa92 f1a2 	rbit	r1, r2
 8002c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c92:	6011      	str	r1, [r2, #0]
  return result;
 8002c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d182      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	497f      	ldr	r1, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d06:	601a      	str	r2, [r3, #0]
  return result;
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	2301      	movs	r3, #1
 8002d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fbda 	bl	80014e0 <HAL_GetTick>
 8002d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d30:	e009      	b.n	8002d46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fbd5 	bl	80014e0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e144      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d6a:	601a      	str	r2, [r3, #0]
  return result;
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe2c>
 8002d8a:	4b54      	ldr	r3, [pc, #336]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e027      	b.n	8002de0 <HAL_RCC_OscConfig+0xe7c>
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002de8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	fa92 f1a2 	rbit	r1, r2
 8002dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e04:	6011      	str	r1, [r2, #0]
  return result;
 8002e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d082      	beq.n	8002d32 <HAL_RCC_OscConfig+0xdce>
 8002e2c:	e0cf      	b.n	8002fce <HAL_RCC_OscConfig+0x106a>
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e52:	601a      	str	r2, [r3, #0]
  return result;
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2300      	movs	r3, #0
 8002e72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fb34 	bl	80014e0 <HAL_GetTick>
 8002e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	e009      	b.n	8002e92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe fb2f 	bl	80014e0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e09e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eb6:	601a      	str	r2, [r3, #0]
  return result;
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ec0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d104      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xf7c>
 8002ed6:	4b01      	ldr	r3, [pc, #4]	; (8002edc <HAL_RCC_OscConfig+0xf78>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e029      	b.n	8002f30 <HAL_RCC_OscConfig+0xfcc>
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCC_OscConfig+0x1078>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f34:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f3c:	6011      	str	r1, [r2, #0]
 8002f3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f42:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	fa92 f1a2 	rbit	r1, r2
 8002f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d180      	bne.n	8002e7e <HAL_RCC_OscConfig+0xf1a>
 8002f7c:	e027      	b.n	8002fce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e01e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_RCC_OscConfig+0x1078>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f9e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10b      	bne.n	8002fca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b09e      	sub	sp, #120	; 0x78
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e162      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b90      	ldr	r3, [pc, #576]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d910      	bls.n	8003028 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b8d      	ldr	r3, [pc, #564]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	498b      	ldr	r1, [pc, #556]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b89      	ldr	r3, [pc, #548]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e14a      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b82      	ldr	r3, [pc, #520]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	497f      	ldr	r1, [pc, #508]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80dc 	beq.w	800320c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d13c      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xf6>
 800305c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003060:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <HAL_RCC_ClockConfig+0xa6>
 8003080:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	e00f      	b.n	80030a6 <HAL_RCC_ClockConfig+0xc6>
 8003086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	667b      	str	r3, [r7, #100]	; 0x64
 8003094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003098:	663b      	str	r3, [r7, #96]	; 0x60
 800309a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030a2:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80030ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f042 0220 	orr.w	r2, r2, #32
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f002 021f 	and.w	r2, r2, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d17b      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0f3      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d13c      	bne.n	8003158 <HAL_RCC_ClockConfig+0x178>
 80030de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_RCC_ClockConfig+0x128>
 8003102:	4b4f      	ldr	r3, [pc, #316]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e00f      	b.n	8003128 <HAL_RCC_ClockConfig+0x148>
 8003108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
 8003116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
 800311c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003124:	4b46      	ldr	r3, [pc, #280]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312c:	63ba      	str	r2, [r7, #56]	; 0x38
 800312e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003130:	fa92 f2a2 	rbit	r2, r2
 8003134:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f002 021f 	and.w	r2, r2, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d13a      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b2      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
 8003158:	2302      	movs	r3, #2
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_RCC_ClockConfig+0x1a0>
 800317a:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e00d      	b.n	800319c <HAL_RCC_ClockConfig+0x1bc>
 8003180:	2302      	movs	r3, #2
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2202      	movs	r2, #2
 800319e:	61ba      	str	r2, [r7, #24]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	fa92 f2a2 	rbit	r2, r2
 80031a6:	617a      	str	r2, [r7, #20]
  return result;
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e079      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	491a      	ldr	r1, [pc, #104]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7fe f980 	bl	80014e0 <HAL_GetTick>
 80031e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7fe f97c 	bl	80014e0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e061      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d214      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	4906      	ldr	r1, [pc, #24]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <HAL_RCC_ClockConfig+0x25c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e040      	b.n	80032be <HAL_RCC_ClockConfig+0x2de>
 800323c:	40022000 	.word	0x40022000
 8003240:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	491a      	ldr	r1, [pc, #104]	; (80032c8 <HAL_RCC_ClockConfig+0x2e8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4912      	ldr	r1, [pc, #72]	; (80032c8 <HAL_RCC_ClockConfig+0x2e8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003282:	f000 f829 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003286:	4601      	mov	r1, r0
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_RCC_ClockConfig+0x2e8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003290:	22f0      	movs	r2, #240	; 0xf0
 8003292:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	fa92 f2a2 	rbit	r2, r2
 800329a:	60fa      	str	r2, [r7, #12]
  return result;
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	40d3      	lsrs	r3, r2
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x2ec>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
 80032aa:	fa21 f303 	lsr.w	r3, r1, r3
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <HAL_RCC_ClockConfig+0x2f0>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCC_ClockConfig+0x2f4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe f8ce 	bl	8001458 <HAL_InitTick>
  
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3778      	adds	r7, #120	; 0x78
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	0800734c 	.word	0x0800734c
 80032d0:	20000004 	.word	0x20000004
 80032d4:	20000008 	.word	0x20000008

080032d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b08b      	sub	sp, #44	; 0x2c
 80032dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x30>
 8003302:	2b08      	cmp	r3, #8
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x36>
 8003306:	e03c      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_GetSysClockFreq+0xc4>)
 800330a:	623b      	str	r3, [r7, #32]
      break;
 800330c:	e03c      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003314:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003318:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	fa92 f2a2 	rbit	r2, r2
 8003320:	607a      	str	r2, [r7, #4]
  return result;
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	40d3      	lsrs	r3, r2
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	220f      	movs	r2, #15
 800333c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	60fa      	str	r2, [r7, #12]
  return result;
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	fab2 f282 	clz	r2, r2
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	40d3      	lsrs	r3, r2
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003360:	4a0e      	ldr	r2, [pc, #56]	; (800339c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	fbb2 f2f3 	udiv	r2, r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
 8003370:	e004      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	623b      	str	r3, [r7, #32]
      break;
 8003380:	e002      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003384:	623b      	str	r3, [r7, #32]
      break;
 8003386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003388:	6a3b      	ldr	r3, [r7, #32]
}
 800338a:	4618      	mov	r0, r3
 800338c:	372c      	adds	r7, #44	; 0x2c
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	007a1200 	.word	0x007a1200
 80033a0:	08007364 	.word	0x08007364
 80033a4:	08007374 	.word	0x08007374
 80033a8:	003d0900 	.word	0x003d0900

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033ca:	f7ff ffef 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033ce:	4601      	mov	r1, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	fa92 f2a2 	rbit	r2, r2
 80033e4:	603a      	str	r2, [r7, #0]
  return result;
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	fab2 f282 	clz	r2, r2
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	40d3      	lsrs	r3, r2
 80033f0:	4a04      	ldr	r2, [pc, #16]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	0800735c 	.word	0x0800735c

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800340e:	f7ff ffcd 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 8003412:	4601      	mov	r1, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800341c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003420:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	fa92 f2a2 	rbit	r2, r2
 8003428:	603a      	str	r2, [r7, #0]
  return result;
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	40d3      	lsrs	r3, r2
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	0800735c 	.word	0x0800735c

0800344c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b092      	sub	sp, #72	; 0x48
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80d4 	beq.w	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10e      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003486:	61d3      	str	r3, [r2, #28]
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a41      	ldr	r2, [pc, #260]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f815 	bl	80014e0 <HAL_GetTick>
 80034b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe f811 	bl	80014e0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	; 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e169      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8084 	beq.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d07c      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	461a      	mov	r2, r3
 8003522:	2301      	movs	r3, #1
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	461a      	mov	r2, r3
 8003546:	2300      	movs	r3, #0
 8003548:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d04b      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fd ffc1 	bl	80014e0 <HAL_GetTick>
 800355e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fd ffbd 	bl	80014e0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e113      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003578:	2302      	movs	r3, #2
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	2302      	movs	r3, #2
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	61fb      	str	r3, [r7, #28]
  return result;
 8003590:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d108      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035a6:	4b01      	ldr	r3, [pc, #4]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	e00d      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
 80035b4:	10908100 	.word	0x10908100
 80035b8:	2302      	movs	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	4b78      	ldr	r3, [pc, #480]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2202      	movs	r2, #2
 80035ca:	613a      	str	r2, [r7, #16]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	fa92 f2a2 	rbit	r2, r2
 80035d2:	60fa      	str	r2, [r7, #12]
  return result;
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	fab2 f282 	clz	r2, r2
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f002 021f 	and.w	r2, r2, #31
 80035e6:	2101      	movs	r1, #1
 80035e8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0b7      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035f2:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	496a      	ldr	r1, [pc, #424]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003604:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003608:	2b01      	cmp	r3, #1
 800360a:	d105      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360c:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	4a65      	ldr	r2, [pc, #404]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003616:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f023 0203 	bic.w	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	495d      	ldr	r1, [pc, #372]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003642:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4956      	ldr	r1, [pc, #344]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003660:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	494e      	ldr	r1, [pc, #312]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800366e:	4313      	orrs	r3, r2
 8003670:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4947      	ldr	r1, [pc, #284]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	493f      	ldr	r1, [pc, #252]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f023 0220 	bic.w	r2, r3, #32
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4938      	ldr	r1, [pc, #224]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4930      	ldr	r1, [pc, #192]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	4929      	ldr	r1, [pc, #164]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4921      	ldr	r1, [pc, #132]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	491a      	ldr	r1, [pc, #104]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	4912      	ldr	r1, [pc, #72]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	4903      	ldr	r1, [pc, #12]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3748      	adds	r7, #72	; 0x48
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e09d      	b.n	80038fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fbb4 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003824:	d902      	bls.n	800382c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e002      	b.n	8003832 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800382c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003830:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800383a:	d007      	beq.n	800384c <HAL_SPI_Init+0xa0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003844:	d002      	beq.n	800384c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	ea42 0103 	orr.w	r1, r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	f003 0204 	and.w	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e040      	b.n	8003996 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fca7 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2224      	movs	r2, #36	; 0x24
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fbbd 	bl	80040c0 <UART_SetConfig>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e022      	b.n	8003996 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fd85 	bl	8004468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fe0c 	bl	80045ac <UART_CheckIdleState>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b08a      	sub	sp, #40	; 0x28
 80039a2:	af02      	add	r7, sp, #8
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d178      	bne.n	8003aa8 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_UART_Transmit+0x24>
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e071      	b.n	8003aaa <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2221      	movs	r2, #33	; 0x21
 80039d2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d4:	f7fd fd84 	bl	80014e0 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	88fa      	ldrh	r2, [r7, #6]
 80039de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d108      	bne.n	8003a06 <HAL_UART_Transmit+0x68>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e003      	b.n	8003a0e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a0e:	e030      	b.n	8003a72 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fe6e 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e03c      	b.n	8003aaa <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	881a      	ldrh	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a42:	b292      	uxth	r2, r2
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e008      	b.n	8003a60 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b292      	uxth	r2, r2
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1c8      	bne.n	8003a10 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fe37 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e005      	b.n	8003aaa <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b0ba      	sub	sp, #232	; 0xe8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d115      	bne.n	8003b1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 82ab 	beq.w	8004068 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
      }
      return;
 8003b1a:	e2a5      	b.n	8004068 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8117 	beq.w	8003d54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b36:	4b85      	ldr	r3, [pc, #532]	; (8003d4c <HAL_UART_IRQHandler+0x298>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 810a 	beq.w	8003d54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d011      	beq.n	8003b70 <HAL_UART_IRQHandler+0xbc>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xec>
 8003b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c02:	f043 0208 	orr.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_UART_IRQHandler+0x18a>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8211 	beq.w	800406c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04f      	beq.n	8003d36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fd97 	bl	80047ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d141      	bne.n	8003d2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d9      	bne.n	8003caa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d013      	beq.n	8003d26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <HAL_UART_IRQHandler+0x29c>)
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fd62 	bl	80017d4 <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00f      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9b4 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00b      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9b0 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e007      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9ac 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d44:	e192      	b.n	800406c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d46:	bf00      	nop
    return;
 8003d48:	e190      	b.n	800406c <HAL_UART_IRQHandler+0x5b8>
 8003d4a:	bf00      	nop
 8003d4c:	04000120 	.word	0x04000120
 8003d50:	08004893 	.word	0x08004893

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	f040 814b 	bne.w	8003ff4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8144 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 813d 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2210      	movs	r2, #16
 8003d80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	f040 80b5 	bne.w	8003efc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8164 	beq.w	8004070 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003db2:	429a      	cmp	r2, r3
 8003db4:	f080 815c 	bcs.w	8004070 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	f000 8086 	beq.w	8003eda <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dfc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1da      	bne.n	8003dce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e1      	bne.n	8003e18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ebe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e4      	bne.n	8003e9a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fc44 	bl	8001762 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8d7 	bl	80040a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003efa:	e0b9      	b.n	8004070 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80ab 	beq.w	8004074 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80a6 	beq.w	8004074 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e4      	bne.n	8003f28 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f82:	633a      	str	r2, [r7, #48]	; 0x30
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e4      	bne.n	8003faa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f85b 	bl	80040a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff2:	e03f      	b.n	8004074 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_UART_IRQHandler+0x56a>
 8004000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fc7b 	bl	8004912 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800401c:	e02d      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00e      	beq.n	8004048 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01c      	beq.n	8004078 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
    }
    return;
 8004046:	e017      	b.n	8004078 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d012      	beq.n	800407a <HAL_UART_IRQHandler+0x5c6>
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fc2c 	bl	80048be <UART_EndTransmit_IT>
    return;
 8004066:	e008      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004068:	bf00      	nop
 800406a:	e006      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
    return;
 800406c:	bf00      	nop
 800406e:	e004      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004070:	bf00      	nop
 8004072:	e002      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004078:	bf00      	nop
  }

}
 800407a:	37e8      	adds	r7, #232	; 0xe8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040ee:	f023 030c 	bic.w	r3, r3, #12
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4aa7      	ldr	r2, [pc, #668]	; (80043d8 <UART_SetConfig+0x318>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d120      	bne.n	8004182 <UART_SetConfig+0xc2>
 8004140:	4ba6      	ldr	r3, [pc, #664]	; (80043dc <UART_SetConfig+0x31c>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	2b03      	cmp	r3, #3
 800414a:	d817      	bhi.n	800417c <UART_SetConfig+0xbc>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x94>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004165 	.word	0x08004165
 8004158:	08004171 	.word	0x08004171
 800415c:	08004177 	.word	0x08004177
 8004160:	0800416b 	.word	0x0800416b
 8004164:	2301      	movs	r3, #1
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e0b5      	b.n	80042d6 <UART_SetConfig+0x216>
 800416a:	2302      	movs	r3, #2
 800416c:	77fb      	strb	r3, [r7, #31]
 800416e:	e0b2      	b.n	80042d6 <UART_SetConfig+0x216>
 8004170:	2304      	movs	r3, #4
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e0af      	b.n	80042d6 <UART_SetConfig+0x216>
 8004176:	2308      	movs	r3, #8
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e0ac      	b.n	80042d6 <UART_SetConfig+0x216>
 800417c:	2310      	movs	r3, #16
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0a9      	b.n	80042d6 <UART_SetConfig+0x216>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a96      	ldr	r2, [pc, #600]	; (80043e0 <UART_SetConfig+0x320>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d124      	bne.n	80041d6 <UART_SetConfig+0x116>
 800418c:	4b93      	ldr	r3, [pc, #588]	; (80043dc <UART_SetConfig+0x31c>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004194:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004198:	d011      	beq.n	80041be <UART_SetConfig+0xfe>
 800419a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800419e:	d817      	bhi.n	80041d0 <UART_SetConfig+0x110>
 80041a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a4:	d011      	beq.n	80041ca <UART_SetConfig+0x10a>
 80041a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041aa:	d811      	bhi.n	80041d0 <UART_SetConfig+0x110>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <UART_SetConfig+0xf8>
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b4:	d006      	beq.n	80041c4 <UART_SetConfig+0x104>
 80041b6:	e00b      	b.n	80041d0 <UART_SetConfig+0x110>
 80041b8:	2300      	movs	r3, #0
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e08b      	b.n	80042d6 <UART_SetConfig+0x216>
 80041be:	2302      	movs	r3, #2
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e088      	b.n	80042d6 <UART_SetConfig+0x216>
 80041c4:	2304      	movs	r3, #4
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e085      	b.n	80042d6 <UART_SetConfig+0x216>
 80041ca:	2308      	movs	r3, #8
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e082      	b.n	80042d6 <UART_SetConfig+0x216>
 80041d0:	2310      	movs	r3, #16
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e07f      	b.n	80042d6 <UART_SetConfig+0x216>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a82      	ldr	r2, [pc, #520]	; (80043e4 <UART_SetConfig+0x324>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d124      	bne.n	800422a <UART_SetConfig+0x16a>
 80041e0:	4b7e      	ldr	r3, [pc, #504]	; (80043dc <UART_SetConfig+0x31c>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80041e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041ec:	d011      	beq.n	8004212 <UART_SetConfig+0x152>
 80041ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041f2:	d817      	bhi.n	8004224 <UART_SetConfig+0x164>
 80041f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041f8:	d011      	beq.n	800421e <UART_SetConfig+0x15e>
 80041fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041fe:	d811      	bhi.n	8004224 <UART_SetConfig+0x164>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <UART_SetConfig+0x14c>
 8004204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004208:	d006      	beq.n	8004218 <UART_SetConfig+0x158>
 800420a:	e00b      	b.n	8004224 <UART_SetConfig+0x164>
 800420c:	2300      	movs	r3, #0
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e061      	b.n	80042d6 <UART_SetConfig+0x216>
 8004212:	2302      	movs	r3, #2
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e05e      	b.n	80042d6 <UART_SetConfig+0x216>
 8004218:	2304      	movs	r3, #4
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e05b      	b.n	80042d6 <UART_SetConfig+0x216>
 800421e:	2308      	movs	r3, #8
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e058      	b.n	80042d6 <UART_SetConfig+0x216>
 8004224:	2310      	movs	r3, #16
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e055      	b.n	80042d6 <UART_SetConfig+0x216>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6e      	ldr	r2, [pc, #440]	; (80043e8 <UART_SetConfig+0x328>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d124      	bne.n	800427e <UART_SetConfig+0x1be>
 8004234:	4b69      	ldr	r3, [pc, #420]	; (80043dc <UART_SetConfig+0x31c>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800423c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004240:	d011      	beq.n	8004266 <UART_SetConfig+0x1a6>
 8004242:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004246:	d817      	bhi.n	8004278 <UART_SetConfig+0x1b8>
 8004248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424c:	d011      	beq.n	8004272 <UART_SetConfig+0x1b2>
 800424e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004252:	d811      	bhi.n	8004278 <UART_SetConfig+0x1b8>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <UART_SetConfig+0x1a0>
 8004258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425c:	d006      	beq.n	800426c <UART_SetConfig+0x1ac>
 800425e:	e00b      	b.n	8004278 <UART_SetConfig+0x1b8>
 8004260:	2300      	movs	r3, #0
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e037      	b.n	80042d6 <UART_SetConfig+0x216>
 8004266:	2302      	movs	r3, #2
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e034      	b.n	80042d6 <UART_SetConfig+0x216>
 800426c:	2304      	movs	r3, #4
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e031      	b.n	80042d6 <UART_SetConfig+0x216>
 8004272:	2308      	movs	r3, #8
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e02e      	b.n	80042d6 <UART_SetConfig+0x216>
 8004278:	2310      	movs	r3, #16
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e02b      	b.n	80042d6 <UART_SetConfig+0x216>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a5a      	ldr	r2, [pc, #360]	; (80043ec <UART_SetConfig+0x32c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d124      	bne.n	80042d2 <UART_SetConfig+0x212>
 8004288:	4b54      	ldr	r3, [pc, #336]	; (80043dc <UART_SetConfig+0x31c>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004294:	d011      	beq.n	80042ba <UART_SetConfig+0x1fa>
 8004296:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800429a:	d817      	bhi.n	80042cc <UART_SetConfig+0x20c>
 800429c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042a0:	d011      	beq.n	80042c6 <UART_SetConfig+0x206>
 80042a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042a6:	d811      	bhi.n	80042cc <UART_SetConfig+0x20c>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <UART_SetConfig+0x1f4>
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d006      	beq.n	80042c0 <UART_SetConfig+0x200>
 80042b2:	e00b      	b.n	80042cc <UART_SetConfig+0x20c>
 80042b4:	2300      	movs	r3, #0
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e00d      	b.n	80042d6 <UART_SetConfig+0x216>
 80042ba:	2302      	movs	r3, #2
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e00a      	b.n	80042d6 <UART_SetConfig+0x216>
 80042c0:	2304      	movs	r3, #4
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e007      	b.n	80042d6 <UART_SetConfig+0x216>
 80042c6:	2308      	movs	r3, #8
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e004      	b.n	80042d6 <UART_SetConfig+0x216>
 80042cc:	2310      	movs	r3, #16
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e001      	b.n	80042d6 <UART_SetConfig+0x216>
 80042d2:	2310      	movs	r3, #16
 80042d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042de:	d15b      	bne.n	8004398 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d827      	bhi.n	8004336 <UART_SetConfig+0x276>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x22c>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004321 	.word	0x08004321
 80042f8:	08004337 	.word	0x08004337
 80042fc:	08004327 	.word	0x08004327
 8004300:	08004337 	.word	0x08004337
 8004304:	08004337 	.word	0x08004337
 8004308:	08004337 	.word	0x08004337
 800430c:	0800432f 	.word	0x0800432f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7ff f858 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8004314:	61b8      	str	r0, [r7, #24]
        break;
 8004316:	e013      	b.n	8004340 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7ff f876 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 800431c:	61b8      	str	r0, [r7, #24]
        break;
 800431e:	e00f      	b.n	8004340 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <UART_SetConfig+0x330>)
 8004322:	61bb      	str	r3, [r7, #24]
        break;
 8004324:	e00c      	b.n	8004340 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe ffd7 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800432a:	61b8      	str	r0, [r7, #24]
        break;
 800432c:	e008      	b.n	8004340 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	61bb      	str	r3, [r7, #24]
        break;
 8004334:	e004      	b.n	8004340 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	77bb      	strb	r3, [r7, #30]
        break;
 800433e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8082 	beq.w	800444c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	005a      	lsls	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	441a      	add	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b0f      	cmp	r3, #15
 8004362:	d916      	bls.n	8004392 <UART_SetConfig+0x2d2>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d212      	bcs.n	8004392 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f023 030f 	bic.w	r3, r3, #15
 8004374:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	b29b      	uxth	r3, r3
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	b29a      	uxth	r2, r3
 8004382:	89fb      	ldrh	r3, [r7, #14]
 8004384:	4313      	orrs	r3, r2
 8004386:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	89fa      	ldrh	r2, [r7, #14]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e05c      	b.n	800444c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	77bb      	strb	r3, [r7, #30]
 8004396:	e059      	b.n	800444c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004398:	7ffb      	ldrb	r3, [r7, #31]
 800439a:	2b08      	cmp	r3, #8
 800439c:	d835      	bhi.n	800440a <UART_SetConfig+0x34a>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x2e4>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	0800440b 	.word	0x0800440b
 80043b4:	080043fb 	.word	0x080043fb
 80043b8:	0800440b 	.word	0x0800440b
 80043bc:	0800440b 	.word	0x0800440b
 80043c0:	0800440b 	.word	0x0800440b
 80043c4:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7fe fffc 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80043cc:	61b8      	str	r0, [r7, #24]
        break;
 80043ce:	e021      	b.n	8004414 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7ff f81a 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80043d4:	61b8      	str	r0, [r7, #24]
        break;
 80043d6:	e01d      	b.n	8004414 <UART_SetConfig+0x354>
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40004400 	.word	0x40004400
 80043e4:	40004800 	.word	0x40004800
 80043e8:	40004c00 	.word	0x40004c00
 80043ec:	40005000 	.word	0x40005000
 80043f0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <UART_SetConfig+0x3a4>)
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e00c      	b.n	8004414 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fe ff6d 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 80043fe:	61b8      	str	r0, [r7, #24]
        break;
 8004400:	e008      	b.n	8004414 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004406:	61bb      	str	r3, [r7, #24]
        break;
 8004408:	e004      	b.n	8004414 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	77bb      	strb	r3, [r7, #30]
        break;
 8004412:	bf00      	nop
    }

    if (pclk != 0U)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d018      	beq.n	800444c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	085a      	lsrs	r2, r3, #1
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	441a      	add	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b0f      	cmp	r3, #15
 8004432:	d909      	bls.n	8004448 <UART_SetConfig+0x388>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443a:	d205      	bcs.n	8004448 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	e001      	b.n	800444c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004458:	7fbb      	ldrb	r3, [r7, #30]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	007a1200 	.word	0x007a1200

08004468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01a      	beq.n	800457e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004566:	d10a      	bne.n	800457e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b098      	sub	sp, #96	; 0x60
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045bc:	f7fc ff90 	bl	80014e0 <HAL_GetTick>
 80045c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d12e      	bne.n	800462e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d8:	2200      	movs	r2, #0
 80045da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f88c 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d021      	beq.n	800462e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
 800460a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800460e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e062      	b.n	80046f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d149      	bne.n	80046d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800463c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f856 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d03c      	beq.n	80046d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	623b      	str	r3, [r7, #32]
   return(result);
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004674:	633b      	str	r3, [r7, #48]	; 0x30
 8004676:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e6      	bne.n	8004656 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3308      	adds	r3, #8
 800468e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60fb      	str	r3, [r7, #12]
   return(result);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a8:	61fa      	str	r2, [r7, #28]
 80046aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	617b      	str	r3, [r7, #20]
   return(result);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e011      	b.n	80046f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3758      	adds	r7, #88	; 0x58
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470c:	e049      	b.n	80047a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d045      	beq.n	80047a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fc fee3 	bl	80014e0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <UART_WaitOnFlagUntilTimeout+0x30>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e048      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d031      	beq.n	80047a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b08      	cmp	r3, #8
 800474a:	d110      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f838 	bl	80047ca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2208      	movs	r2, #8
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e029      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d111      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f81e 	bl	80047ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e00f      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d0a6      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b095      	sub	sp, #84	; 0x54
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
 80047f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e6      	bne.n	80047d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	61fb      	str	r3, [r7, #28]
   return(result);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e5      	bne.n	8004804 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	2b01      	cmp	r3, #1
 800483e:	d118      	bne.n	8004872 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	60bb      	str	r3, [r7, #8]
   return(result);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f023 0310 	bic.w	r3, r3, #16
 8004854:	647b      	str	r3, [r7, #68]	; 0x44
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004886:	bf00      	nop
 8004888:	3754      	adds	r7, #84	; 0x54
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fbef 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b088      	sub	sp, #32
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6979      	ldr	r1, [r7, #20]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fbbb 	bl	8004080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490a:	bf00      	nop
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800492e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004932:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	b29b      	uxth	r3, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	b29b      	uxth	r3, r3
 8004944:	4013      	ands	r3, r2
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800495c:	b084      	sub	sp, #16
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	f107 0014 	add.w	r0, r7, #20
 800496a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	b004      	add	sp, #16
 800499c:	4770      	bx	lr

0800499e <__cvt>:
 800499e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a2:	ec55 4b10 	vmov	r4, r5, d0
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	460e      	mov	r6, r1
 80049aa:	4619      	mov	r1, r3
 80049ac:	462b      	mov	r3, r5
 80049ae:	bfbb      	ittet	lt
 80049b0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049b4:	461d      	movlt	r5, r3
 80049b6:	2300      	movge	r3, #0
 80049b8:	232d      	movlt	r3, #45	; 0x2d
 80049ba:	700b      	strb	r3, [r1, #0]
 80049bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049c2:	4691      	mov	r9, r2
 80049c4:	f023 0820 	bic.w	r8, r3, #32
 80049c8:	bfbc      	itt	lt
 80049ca:	4622      	movlt	r2, r4
 80049cc:	4614      	movlt	r4, r2
 80049ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d2:	d005      	beq.n	80049e0 <__cvt+0x42>
 80049d4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049d8:	d100      	bne.n	80049dc <__cvt+0x3e>
 80049da:	3601      	adds	r6, #1
 80049dc:	2102      	movs	r1, #2
 80049de:	e000      	b.n	80049e2 <__cvt+0x44>
 80049e0:	2103      	movs	r1, #3
 80049e2:	ab03      	add	r3, sp, #12
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	ab02      	add	r3, sp, #8
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	ec45 4b10 	vmov	d0, r4, r5
 80049ee:	4653      	mov	r3, sl
 80049f0:	4632      	mov	r2, r6
 80049f2:	f000 fe49 	bl	8005688 <_dtoa_r>
 80049f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049fa:	4607      	mov	r7, r0
 80049fc:	d102      	bne.n	8004a04 <__cvt+0x66>
 80049fe:	f019 0f01 	tst.w	r9, #1
 8004a02:	d022      	beq.n	8004a4a <__cvt+0xac>
 8004a04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a08:	eb07 0906 	add.w	r9, r7, r6
 8004a0c:	d110      	bne.n	8004a30 <__cvt+0x92>
 8004a0e:	783b      	ldrb	r3, [r7, #0]
 8004a10:	2b30      	cmp	r3, #48	; 0x30
 8004a12:	d10a      	bne.n	8004a2a <__cvt+0x8c>
 8004a14:	2200      	movs	r2, #0
 8004a16:	2300      	movs	r3, #0
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fc f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a20:	b918      	cbnz	r0, 8004a2a <__cvt+0x8c>
 8004a22:	f1c6 0601 	rsb	r6, r6, #1
 8004a26:	f8ca 6000 	str.w	r6, [sl]
 8004a2a:	f8da 3000 	ldr.w	r3, [sl]
 8004a2e:	4499      	add	r9, r3
 8004a30:	2200      	movs	r2, #0
 8004a32:	2300      	movs	r3, #0
 8004a34:	4620      	mov	r0, r4
 8004a36:	4629      	mov	r1, r5
 8004a38:	f7fc f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a3c:	b108      	cbz	r0, 8004a42 <__cvt+0xa4>
 8004a3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a42:	2230      	movs	r2, #48	; 0x30
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	454b      	cmp	r3, r9
 8004a48:	d307      	bcc.n	8004a5a <__cvt+0xbc>
 8004a4a:	9b03      	ldr	r3, [sp, #12]
 8004a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a4e:	1bdb      	subs	r3, r3, r7
 8004a50:	4638      	mov	r0, r7
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	b004      	add	sp, #16
 8004a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	9103      	str	r1, [sp, #12]
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e7f0      	b.n	8004a44 <__cvt+0xa6>

08004a62 <__exponent>:
 8004a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a64:	4603      	mov	r3, r0
 8004a66:	2900      	cmp	r1, #0
 8004a68:	bfb8      	it	lt
 8004a6a:	4249      	neglt	r1, r1
 8004a6c:	f803 2b02 	strb.w	r2, [r3], #2
 8004a70:	bfb4      	ite	lt
 8004a72:	222d      	movlt	r2, #45	; 0x2d
 8004a74:	222b      	movge	r2, #43	; 0x2b
 8004a76:	2909      	cmp	r1, #9
 8004a78:	7042      	strb	r2, [r0, #1]
 8004a7a:	dd2a      	ble.n	8004ad2 <__exponent+0x70>
 8004a7c:	f10d 0207 	add.w	r2, sp, #7
 8004a80:	4617      	mov	r7, r2
 8004a82:	260a      	movs	r6, #10
 8004a84:	4694      	mov	ip, r2
 8004a86:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a8a:	fb06 1415 	mls	r4, r6, r5, r1
 8004a8e:	3430      	adds	r4, #48	; 0x30
 8004a90:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a94:	460c      	mov	r4, r1
 8004a96:	2c63      	cmp	r4, #99	; 0x63
 8004a98:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	dcf1      	bgt.n	8004a84 <__exponent+0x22>
 8004aa0:	3130      	adds	r1, #48	; 0x30
 8004aa2:	f1ac 0402 	sub.w	r4, ip, #2
 8004aa6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004aaa:	1c41      	adds	r1, r0, #1
 8004aac:	4622      	mov	r2, r4
 8004aae:	42ba      	cmp	r2, r7
 8004ab0:	d30a      	bcc.n	8004ac8 <__exponent+0x66>
 8004ab2:	f10d 0209 	add.w	r2, sp, #9
 8004ab6:	eba2 020c 	sub.w	r2, r2, ip
 8004aba:	42bc      	cmp	r4, r7
 8004abc:	bf88      	it	hi
 8004abe:	2200      	movhi	r2, #0
 8004ac0:	4413      	add	r3, r2
 8004ac2:	1a18      	subs	r0, r3, r0
 8004ac4:	b003      	add	sp, #12
 8004ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004acc:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ad0:	e7ed      	b.n	8004aae <__exponent+0x4c>
 8004ad2:	2330      	movs	r3, #48	; 0x30
 8004ad4:	3130      	adds	r1, #48	; 0x30
 8004ad6:	7083      	strb	r3, [r0, #2]
 8004ad8:	70c1      	strb	r1, [r0, #3]
 8004ada:	1d03      	adds	r3, r0, #4
 8004adc:	e7f1      	b.n	8004ac2 <__exponent+0x60>
	...

08004ae0 <_printf_float>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	ed2d 8b02 	vpush	{d8}
 8004ae8:	b08d      	sub	sp, #52	; 0x34
 8004aea:	460c      	mov	r4, r1
 8004aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004af0:	4616      	mov	r6, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	4605      	mov	r5, r0
 8004af6:	f000 fcc7 	bl	8005488 <_localeconv_r>
 8004afa:	f8d0 a000 	ldr.w	sl, [r0]
 8004afe:	4650      	mov	r0, sl
 8004b00:	f7fb fbb6 	bl	8000270 <strlen>
 8004b04:	2300      	movs	r3, #0
 8004b06:	930a      	str	r3, [sp, #40]	; 0x28
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b14:	3307      	adds	r3, #7
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	f103 0208 	add.w	r2, r3, #8
 8004b1e:	f8c8 2000 	str.w	r2, [r8]
 8004b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b2a:	9307      	str	r3, [sp, #28]
 8004b2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b30:	ee08 0a10 	vmov	s16, r0
 8004b34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b3c:	4b9e      	ldr	r3, [pc, #632]	; (8004db8 <_printf_float+0x2d8>)
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b42:	f7fb fff3 	bl	8000b2c <__aeabi_dcmpun>
 8004b46:	bb88      	cbnz	r0, 8004bac <_printf_float+0xcc>
 8004b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b4c:	4b9a      	ldr	r3, [pc, #616]	; (8004db8 <_printf_float+0x2d8>)
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	f7fb ffcd 	bl	8000af0 <__aeabi_dcmple>
 8004b56:	bb48      	cbnz	r0, 8004bac <_printf_float+0xcc>
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb ffbc 	bl	8000adc <__aeabi_dcmplt>
 8004b64:	b110      	cbz	r0, 8004b6c <_printf_float+0x8c>
 8004b66:	232d      	movs	r3, #45	; 0x2d
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	4a93      	ldr	r2, [pc, #588]	; (8004dbc <_printf_float+0x2dc>)
 8004b6e:	4b94      	ldr	r3, [pc, #592]	; (8004dc0 <_printf_float+0x2e0>)
 8004b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b74:	bf94      	ite	ls
 8004b76:	4690      	movls	r8, r2
 8004b78:	4698      	movhi	r8, r3
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	9b05      	ldr	r3, [sp, #20]
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	f04f 0900 	mov.w	r9, #0
 8004b8a:	9700      	str	r7, [sp, #0]
 8004b8c:	4633      	mov	r3, r6
 8004b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b90:	4621      	mov	r1, r4
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 f9da 	bl	8004f4c <_printf_common>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f040 8090 	bne.w	8004cbe <_printf_float+0x1de>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba2:	b00d      	add	sp, #52	; 0x34
 8004ba4:	ecbd 8b02 	vpop	{d8}
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	4642      	mov	r2, r8
 8004bae:	464b      	mov	r3, r9
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fb ffba 	bl	8000b2c <__aeabi_dcmpun>
 8004bb8:	b140      	cbz	r0, 8004bcc <_printf_float+0xec>
 8004bba:	464b      	mov	r3, r9
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bfbc      	itt	lt
 8004bc0:	232d      	movlt	r3, #45	; 0x2d
 8004bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bc6:	4a7f      	ldr	r2, [pc, #508]	; (8004dc4 <_printf_float+0x2e4>)
 8004bc8:	4b7f      	ldr	r3, [pc, #508]	; (8004dc8 <_printf_float+0x2e8>)
 8004bca:	e7d1      	b.n	8004b70 <_printf_float+0x90>
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bd2:	9206      	str	r2, [sp, #24]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	d13f      	bne.n	8004c58 <_printf_float+0x178>
 8004bd8:	2306      	movs	r3, #6
 8004bda:	6063      	str	r3, [r4, #4]
 8004bdc:	9b05      	ldr	r3, [sp, #20]
 8004bde:	6861      	ldr	r1, [r4, #4]
 8004be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004be4:	2300      	movs	r3, #0
 8004be6:	9303      	str	r3, [sp, #12]
 8004be8:	ab0a      	add	r3, sp, #40	; 0x28
 8004bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bee:	ab09      	add	r3, sp, #36	; 0x24
 8004bf0:	ec49 8b10 	vmov	d0, r8, r9
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f7ff fece 	bl	800499e <__cvt>
 8004c02:	9b06      	ldr	r3, [sp, #24]
 8004c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c06:	2b47      	cmp	r3, #71	; 0x47
 8004c08:	4680      	mov	r8, r0
 8004c0a:	d108      	bne.n	8004c1e <_printf_float+0x13e>
 8004c0c:	1cc8      	adds	r0, r1, #3
 8004c0e:	db02      	blt.n	8004c16 <_printf_float+0x136>
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	4299      	cmp	r1, r3
 8004c14:	dd41      	ble.n	8004c9a <_printf_float+0x1ba>
 8004c16:	f1ab 0302 	sub.w	r3, fp, #2
 8004c1a:	fa5f fb83 	uxtb.w	fp, r3
 8004c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c22:	d820      	bhi.n	8004c66 <_printf_float+0x186>
 8004c24:	3901      	subs	r1, #1
 8004c26:	465a      	mov	r2, fp
 8004c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8004c2e:	f7ff ff18 	bl	8004a62 <__exponent>
 8004c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c34:	1813      	adds	r3, r2, r0
 8004c36:	2a01      	cmp	r2, #1
 8004c38:	4681      	mov	r9, r0
 8004c3a:	6123      	str	r3, [r4, #16]
 8004c3c:	dc02      	bgt.n	8004c44 <_printf_float+0x164>
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	07d2      	lsls	r2, r2, #31
 8004c42:	d501      	bpl.n	8004c48 <_printf_float+0x168>
 8004c44:	3301      	adds	r3, #1
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d09c      	beq.n	8004b8a <_printf_float+0xaa>
 8004c50:	232d      	movs	r3, #45	; 0x2d
 8004c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c56:	e798      	b.n	8004b8a <_printf_float+0xaa>
 8004c58:	9a06      	ldr	r2, [sp, #24]
 8004c5a:	2a47      	cmp	r2, #71	; 0x47
 8004c5c:	d1be      	bne.n	8004bdc <_printf_float+0xfc>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1bc      	bne.n	8004bdc <_printf_float+0xfc>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e7b9      	b.n	8004bda <_printf_float+0xfa>
 8004c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c6a:	d118      	bne.n	8004c9e <_printf_float+0x1be>
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	dd0b      	ble.n	8004c8a <_printf_float+0x1aa>
 8004c72:	6121      	str	r1, [r4, #16]
 8004c74:	b913      	cbnz	r3, 8004c7c <_printf_float+0x19c>
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	07d0      	lsls	r0, r2, #31
 8004c7a:	d502      	bpl.n	8004c82 <_printf_float+0x1a2>
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	440b      	add	r3, r1
 8004c80:	6123      	str	r3, [r4, #16]
 8004c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	e7de      	b.n	8004c48 <_printf_float+0x168>
 8004c8a:	b913      	cbnz	r3, 8004c92 <_printf_float+0x1b2>
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	07d2      	lsls	r2, r2, #31
 8004c90:	d501      	bpl.n	8004c96 <_printf_float+0x1b6>
 8004c92:	3302      	adds	r3, #2
 8004c94:	e7f4      	b.n	8004c80 <_printf_float+0x1a0>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e7f2      	b.n	8004c80 <_printf_float+0x1a0>
 8004c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	db05      	blt.n	8004cb0 <_printf_float+0x1d0>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	6121      	str	r1, [r4, #16]
 8004ca8:	07d8      	lsls	r0, r3, #31
 8004caa:	d5ea      	bpl.n	8004c82 <_printf_float+0x1a2>
 8004cac:	1c4b      	adds	r3, r1, #1
 8004cae:	e7e7      	b.n	8004c80 <_printf_float+0x1a0>
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	bfd4      	ite	le
 8004cb4:	f1c1 0202 	rsble	r2, r1, #2
 8004cb8:	2201      	movgt	r2, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	e7e0      	b.n	8004c80 <_printf_float+0x1a0>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	055a      	lsls	r2, r3, #21
 8004cc2:	d407      	bmi.n	8004cd4 <_printf_float+0x1f4>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d12c      	bne.n	8004d2c <_printf_float+0x24c>
 8004cd2:	e764      	b.n	8004b9e <_printf_float+0xbe>
 8004cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cd8:	f240 80e0 	bls.w	8004e9c <_printf_float+0x3bc>
 8004cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f7fb fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d034      	beq.n	8004d56 <_printf_float+0x276>
 8004cec:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <_printf_float+0x2ec>)
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af51 	beq.w	8004b9e <_printf_float+0xbe>
 8004cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d00:	429a      	cmp	r2, r3
 8004d02:	db02      	blt.n	8004d0a <_printf_float+0x22a>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	07d8      	lsls	r0, r3, #31
 8004d08:	d510      	bpl.n	8004d2c <_printf_float+0x24c>
 8004d0a:	ee18 3a10 	vmov	r3, s16
 8004d0e:	4652      	mov	r2, sl
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af41 	beq.w	8004b9e <_printf_float+0xbe>
 8004d1c:	f04f 0800 	mov.w	r8, #0
 8004d20:	f104 091a 	add.w	r9, r4, #26
 8004d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d26:	3b01      	subs	r3, #1
 8004d28:	4543      	cmp	r3, r8
 8004d2a:	dc09      	bgt.n	8004d40 <_printf_float+0x260>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	079b      	lsls	r3, r3, #30
 8004d30:	f100 8107 	bmi.w	8004f42 <_printf_float+0x462>
 8004d34:	68e0      	ldr	r0, [r4, #12]
 8004d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d38:	4298      	cmp	r0, r3
 8004d3a:	bfb8      	it	lt
 8004d3c:	4618      	movlt	r0, r3
 8004d3e:	e730      	b.n	8004ba2 <_printf_float+0xc2>
 8004d40:	2301      	movs	r3, #1
 8004d42:	464a      	mov	r2, r9
 8004d44:	4631      	mov	r1, r6
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f af27 	beq.w	8004b9e <_printf_float+0xbe>
 8004d50:	f108 0801 	add.w	r8, r8, #1
 8004d54:	e7e6      	b.n	8004d24 <_printf_float+0x244>
 8004d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	dc39      	bgt.n	8004dd0 <_printf_float+0x2f0>
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <_printf_float+0x2ec>)
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f af19 	beq.w	8004b9e <_printf_float+0xbe>
 8004d6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d70:	4313      	orrs	r3, r2
 8004d72:	d102      	bne.n	8004d7a <_printf_float+0x29a>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	07d9      	lsls	r1, r3, #31
 8004d78:	d5d8      	bpl.n	8004d2c <_printf_float+0x24c>
 8004d7a:	ee18 3a10 	vmov	r3, s16
 8004d7e:	4652      	mov	r2, sl
 8004d80:	4631      	mov	r1, r6
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	f43f af09 	beq.w	8004b9e <_printf_float+0xbe>
 8004d8c:	f04f 0900 	mov.w	r9, #0
 8004d90:	f104 0a1a 	add.w	sl, r4, #26
 8004d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d96:	425b      	negs	r3, r3
 8004d98:	454b      	cmp	r3, r9
 8004d9a:	dc01      	bgt.n	8004da0 <_printf_float+0x2c0>
 8004d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d9e:	e792      	b.n	8004cc6 <_printf_float+0x1e6>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4652      	mov	r2, sl
 8004da4:	4631      	mov	r1, r6
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b8      	blx	r7
 8004daa:	3001      	adds	r0, #1
 8004dac:	f43f aef7 	beq.w	8004b9e <_printf_float+0xbe>
 8004db0:	f109 0901 	add.w	r9, r9, #1
 8004db4:	e7ee      	b.n	8004d94 <_printf_float+0x2b4>
 8004db6:	bf00      	nop
 8004db8:	7fefffff 	.word	0x7fefffff
 8004dbc:	08007384 	.word	0x08007384
 8004dc0:	08007388 	.word	0x08007388
 8004dc4:	0800738c 	.word	0x0800738c
 8004dc8:	08007390 	.word	0x08007390
 8004dcc:	08007394 	.word	0x08007394
 8004dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	bfa8      	it	ge
 8004dd8:	461a      	movge	r2, r3
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	4691      	mov	r9, r2
 8004dde:	dc37      	bgt.n	8004e50 <_printf_float+0x370>
 8004de0:	f04f 0b00 	mov.w	fp, #0
 8004de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de8:	f104 021a 	add.w	r2, r4, #26
 8004dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	eba3 0309 	sub.w	r3, r3, r9
 8004df4:	455b      	cmp	r3, fp
 8004df6:	dc33      	bgt.n	8004e60 <_printf_float+0x380>
 8004df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	db3b      	blt.n	8004e78 <_printf_float+0x398>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07da      	lsls	r2, r3, #31
 8004e04:	d438      	bmi.n	8004e78 <_printf_float+0x398>
 8004e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e0a:	eba2 0903 	sub.w	r9, r2, r3
 8004e0e:	9b05      	ldr	r3, [sp, #20]
 8004e10:	1ad2      	subs	r2, r2, r3
 8004e12:	4591      	cmp	r9, r2
 8004e14:	bfa8      	it	ge
 8004e16:	4691      	movge	r9, r2
 8004e18:	f1b9 0f00 	cmp.w	r9, #0
 8004e1c:	dc35      	bgt.n	8004e8a <_printf_float+0x3aa>
 8004e1e:	f04f 0800 	mov.w	r8, #0
 8004e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e26:	f104 0a1a 	add.w	sl, r4, #26
 8004e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	eba3 0309 	sub.w	r3, r3, r9
 8004e34:	4543      	cmp	r3, r8
 8004e36:	f77f af79 	ble.w	8004d2c <_printf_float+0x24c>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4652      	mov	r2, sl
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	f43f aeaa 	beq.w	8004b9e <_printf_float+0xbe>
 8004e4a:	f108 0801 	add.w	r8, r8, #1
 8004e4e:	e7ec      	b.n	8004e2a <_printf_float+0x34a>
 8004e50:	4613      	mov	r3, r2
 8004e52:	4631      	mov	r1, r6
 8004e54:	4642      	mov	r2, r8
 8004e56:	4628      	mov	r0, r5
 8004e58:	47b8      	blx	r7
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d1c0      	bne.n	8004de0 <_printf_float+0x300>
 8004e5e:	e69e      	b.n	8004b9e <_printf_float+0xbe>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	9205      	str	r2, [sp, #20]
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f ae97 	beq.w	8004b9e <_printf_float+0xbe>
 8004e70:	9a05      	ldr	r2, [sp, #20]
 8004e72:	f10b 0b01 	add.w	fp, fp, #1
 8004e76:	e7b9      	b.n	8004dec <_printf_float+0x30c>
 8004e78:	ee18 3a10 	vmov	r3, s16
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	d1be      	bne.n	8004e06 <_printf_float+0x326>
 8004e88:	e689      	b.n	8004b9e <_printf_float+0xbe>
 8004e8a:	9a05      	ldr	r2, [sp, #20]
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	4442      	add	r2, r8
 8004e90:	4631      	mov	r1, r6
 8004e92:	4628      	mov	r0, r5
 8004e94:	47b8      	blx	r7
 8004e96:	3001      	adds	r0, #1
 8004e98:	d1c1      	bne.n	8004e1e <_printf_float+0x33e>
 8004e9a:	e680      	b.n	8004b9e <_printf_float+0xbe>
 8004e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e9e:	2a01      	cmp	r2, #1
 8004ea0:	dc01      	bgt.n	8004ea6 <_printf_float+0x3c6>
 8004ea2:	07db      	lsls	r3, r3, #31
 8004ea4:	d53a      	bpl.n	8004f1c <_printf_float+0x43c>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f ae74 	beq.w	8004b9e <_printf_float+0xbe>
 8004eb6:	ee18 3a10 	vmov	r3, s16
 8004eba:	4652      	mov	r2, sl
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f ae6b 	beq.w	8004b9e <_printf_float+0xbe>
 8004ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ed4:	f7fb fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed8:	b9d8      	cbnz	r0, 8004f12 <_printf_float+0x432>
 8004eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ede:	f108 0201 	add.w	r2, r8, #1
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d10e      	bne.n	8004f0a <_printf_float+0x42a>
 8004eec:	e657      	b.n	8004b9e <_printf_float+0xbe>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f ae50 	beq.w	8004b9e <_printf_float+0xbe>
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4543      	cmp	r3, r8
 8004f08:	dcf1      	bgt.n	8004eee <_printf_float+0x40e>
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f10:	e6da      	b.n	8004cc8 <_printf_float+0x1e8>
 8004f12:	f04f 0800 	mov.w	r8, #0
 8004f16:	f104 0a1a 	add.w	sl, r4, #26
 8004f1a:	e7f2      	b.n	8004f02 <_printf_float+0x422>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4642      	mov	r2, r8
 8004f20:	e7df      	b.n	8004ee2 <_printf_float+0x402>
 8004f22:	2301      	movs	r3, #1
 8004f24:	464a      	mov	r2, r9
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	47b8      	blx	r7
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	f43f ae36 	beq.w	8004b9e <_printf_float+0xbe>
 8004f32:	f108 0801 	add.w	r8, r8, #1
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f3a:	1a5b      	subs	r3, r3, r1
 8004f3c:	4543      	cmp	r3, r8
 8004f3e:	dcf0      	bgt.n	8004f22 <_printf_float+0x442>
 8004f40:	e6f8      	b.n	8004d34 <_printf_float+0x254>
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	f104 0919 	add.w	r9, r4, #25
 8004f4a:	e7f4      	b.n	8004f36 <_printf_float+0x456>

08004f4c <_printf_common>:
 8004f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	4616      	mov	r6, r2
 8004f52:	4699      	mov	r9, r3
 8004f54:	688a      	ldr	r2, [r1, #8]
 8004f56:	690b      	ldr	r3, [r1, #16]
 8004f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	bfb8      	it	lt
 8004f60:	4613      	movlt	r3, r2
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f68:	4607      	mov	r7, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b10a      	cbz	r2, 8004f72 <_printf_common+0x26>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	0699      	lsls	r1, r3, #26
 8004f76:	bf42      	ittt	mi
 8004f78:	6833      	ldrmi	r3, [r6, #0]
 8004f7a:	3302      	addmi	r3, #2
 8004f7c:	6033      	strmi	r3, [r6, #0]
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	f015 0506 	ands.w	r5, r5, #6
 8004f84:	d106      	bne.n	8004f94 <_printf_common+0x48>
 8004f86:	f104 0a19 	add.w	sl, r4, #25
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	6832      	ldr	r2, [r6, #0]
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dc26      	bgt.n	8004fe2 <_printf_common+0x96>
 8004f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f98:	1e13      	subs	r3, r2, #0
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	bf18      	it	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	0692      	lsls	r2, r2, #26
 8004fa2:	d42b      	bmi.n	8004ffc <_printf_common+0xb0>
 8004fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d01e      	beq.n	8004ff0 <_printf_common+0xa4>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	f003 0306 	and.w	r3, r3, #6
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	bf02      	ittt	eq
 8004fbe:	68e5      	ldreq	r5, [r4, #12]
 8004fc0:	6833      	ldreq	r3, [r6, #0]
 8004fc2:	1aed      	subeq	r5, r5, r3
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	bf0c      	ite	eq
 8004fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fcc:	2500      	movne	r5, #0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	bfc4      	itt	gt
 8004fd2:	1a9b      	subgt	r3, r3, r2
 8004fd4:	18ed      	addgt	r5, r5, r3
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	341a      	adds	r4, #26
 8004fda:	42b5      	cmp	r5, r6
 8004fdc:	d11a      	bne.n	8005014 <_printf_common+0xc8>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e008      	b.n	8004ff4 <_printf_common+0xa8>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4652      	mov	r2, sl
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4638      	mov	r0, r7
 8004fea:	47c0      	blx	r8
 8004fec:	3001      	adds	r0, #1
 8004fee:	d103      	bne.n	8004ff8 <_printf_common+0xac>
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	e7c6      	b.n	8004f8a <_printf_common+0x3e>
 8004ffc:	18e1      	adds	r1, r4, r3
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	2030      	movs	r0, #48	; 0x30
 8005002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005006:	4422      	add	r2, r4
 8005008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005010:	3302      	adds	r3, #2
 8005012:	e7c7      	b.n	8004fa4 <_printf_common+0x58>
 8005014:	2301      	movs	r3, #1
 8005016:	4622      	mov	r2, r4
 8005018:	4649      	mov	r1, r9
 800501a:	4638      	mov	r0, r7
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d0e6      	beq.n	8004ff0 <_printf_common+0xa4>
 8005022:	3601      	adds	r6, #1
 8005024:	e7d9      	b.n	8004fda <_printf_common+0x8e>
	...

08005028 <_printf_i>:
 8005028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	7e0f      	ldrb	r7, [r1, #24]
 800502e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005030:	2f78      	cmp	r7, #120	; 0x78
 8005032:	4691      	mov	r9, r2
 8005034:	4680      	mov	r8, r0
 8005036:	460c      	mov	r4, r1
 8005038:	469a      	mov	sl, r3
 800503a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800503e:	d807      	bhi.n	8005050 <_printf_i+0x28>
 8005040:	2f62      	cmp	r7, #98	; 0x62
 8005042:	d80a      	bhi.n	800505a <_printf_i+0x32>
 8005044:	2f00      	cmp	r7, #0
 8005046:	f000 80d4 	beq.w	80051f2 <_printf_i+0x1ca>
 800504a:	2f58      	cmp	r7, #88	; 0x58
 800504c:	f000 80c0 	beq.w	80051d0 <_printf_i+0x1a8>
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005058:	e03a      	b.n	80050d0 <_printf_i+0xa8>
 800505a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800505e:	2b15      	cmp	r3, #21
 8005060:	d8f6      	bhi.n	8005050 <_printf_i+0x28>
 8005062:	a101      	add	r1, pc, #4	; (adr r1, 8005068 <_printf_i+0x40>)
 8005064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005068:	080050c1 	.word	0x080050c1
 800506c:	080050d5 	.word	0x080050d5
 8005070:	08005051 	.word	0x08005051
 8005074:	08005051 	.word	0x08005051
 8005078:	08005051 	.word	0x08005051
 800507c:	08005051 	.word	0x08005051
 8005080:	080050d5 	.word	0x080050d5
 8005084:	08005051 	.word	0x08005051
 8005088:	08005051 	.word	0x08005051
 800508c:	08005051 	.word	0x08005051
 8005090:	08005051 	.word	0x08005051
 8005094:	080051d9 	.word	0x080051d9
 8005098:	08005101 	.word	0x08005101
 800509c:	08005193 	.word	0x08005193
 80050a0:	08005051 	.word	0x08005051
 80050a4:	08005051 	.word	0x08005051
 80050a8:	080051fb 	.word	0x080051fb
 80050ac:	08005051 	.word	0x08005051
 80050b0:	08005101 	.word	0x08005101
 80050b4:	08005051 	.word	0x08005051
 80050b8:	08005051 	.word	0x08005051
 80050bc:	0800519b 	.word	0x0800519b
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	1d1a      	adds	r2, r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	602a      	str	r2, [r5, #0]
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050d0:	2301      	movs	r3, #1
 80050d2:	e09f      	b.n	8005214 <_printf_i+0x1ec>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	0607      	lsls	r7, r0, #24
 80050da:	f103 0104 	add.w	r1, r3, #4
 80050de:	6029      	str	r1, [r5, #0]
 80050e0:	d501      	bpl.n	80050e6 <_printf_i+0xbe>
 80050e2:	681e      	ldr	r6, [r3, #0]
 80050e4:	e003      	b.n	80050ee <_printf_i+0xc6>
 80050e6:	0646      	lsls	r6, r0, #25
 80050e8:	d5fb      	bpl.n	80050e2 <_printf_i+0xba>
 80050ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	da03      	bge.n	80050fa <_printf_i+0xd2>
 80050f2:	232d      	movs	r3, #45	; 0x2d
 80050f4:	4276      	negs	r6, r6
 80050f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fa:	485a      	ldr	r0, [pc, #360]	; (8005264 <_printf_i+0x23c>)
 80050fc:	230a      	movs	r3, #10
 80050fe:	e012      	b.n	8005126 <_printf_i+0xfe>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	1d19      	adds	r1, r3, #4
 8005106:	6029      	str	r1, [r5, #0]
 8005108:	0605      	lsls	r5, r0, #24
 800510a:	d501      	bpl.n	8005110 <_printf_i+0xe8>
 800510c:	681e      	ldr	r6, [r3, #0]
 800510e:	e002      	b.n	8005116 <_printf_i+0xee>
 8005110:	0641      	lsls	r1, r0, #25
 8005112:	d5fb      	bpl.n	800510c <_printf_i+0xe4>
 8005114:	881e      	ldrh	r6, [r3, #0]
 8005116:	4853      	ldr	r0, [pc, #332]	; (8005264 <_printf_i+0x23c>)
 8005118:	2f6f      	cmp	r7, #111	; 0x6f
 800511a:	bf0c      	ite	eq
 800511c:	2308      	moveq	r3, #8
 800511e:	230a      	movne	r3, #10
 8005120:	2100      	movs	r1, #0
 8005122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005126:	6865      	ldr	r5, [r4, #4]
 8005128:	60a5      	str	r5, [r4, #8]
 800512a:	2d00      	cmp	r5, #0
 800512c:	bfa2      	ittt	ge
 800512e:	6821      	ldrge	r1, [r4, #0]
 8005130:	f021 0104 	bicge.w	r1, r1, #4
 8005134:	6021      	strge	r1, [r4, #0]
 8005136:	b90e      	cbnz	r6, 800513c <_printf_i+0x114>
 8005138:	2d00      	cmp	r5, #0
 800513a:	d04b      	beq.n	80051d4 <_printf_i+0x1ac>
 800513c:	4615      	mov	r5, r2
 800513e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005142:	fb03 6711 	mls	r7, r3, r1, r6
 8005146:	5dc7      	ldrb	r7, [r0, r7]
 8005148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800514c:	4637      	mov	r7, r6
 800514e:	42bb      	cmp	r3, r7
 8005150:	460e      	mov	r6, r1
 8005152:	d9f4      	bls.n	800513e <_printf_i+0x116>
 8005154:	2b08      	cmp	r3, #8
 8005156:	d10b      	bne.n	8005170 <_printf_i+0x148>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	07de      	lsls	r6, r3, #31
 800515c:	d508      	bpl.n	8005170 <_printf_i+0x148>
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	6861      	ldr	r1, [r4, #4]
 8005162:	4299      	cmp	r1, r3
 8005164:	bfde      	ittt	le
 8005166:	2330      	movle	r3, #48	; 0x30
 8005168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800516c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005170:	1b52      	subs	r2, r2, r5
 8005172:	6122      	str	r2, [r4, #16]
 8005174:	f8cd a000 	str.w	sl, [sp]
 8005178:	464b      	mov	r3, r9
 800517a:	aa03      	add	r2, sp, #12
 800517c:	4621      	mov	r1, r4
 800517e:	4640      	mov	r0, r8
 8005180:	f7ff fee4 	bl	8004f4c <_printf_common>
 8005184:	3001      	adds	r0, #1
 8005186:	d14a      	bne.n	800521e <_printf_i+0x1f6>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	b004      	add	sp, #16
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	4833      	ldr	r0, [pc, #204]	; (8005268 <_printf_i+0x240>)
 800519c:	2778      	movs	r7, #120	; 0x78
 800519e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	6829      	ldr	r1, [r5, #0]
 80051a6:	061f      	lsls	r7, r3, #24
 80051a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80051ac:	d402      	bmi.n	80051b4 <_printf_i+0x18c>
 80051ae:	065f      	lsls	r7, r3, #25
 80051b0:	bf48      	it	mi
 80051b2:	b2b6      	uxthmi	r6, r6
 80051b4:	07df      	lsls	r7, r3, #31
 80051b6:	bf48      	it	mi
 80051b8:	f043 0320 	orrmi.w	r3, r3, #32
 80051bc:	6029      	str	r1, [r5, #0]
 80051be:	bf48      	it	mi
 80051c0:	6023      	strmi	r3, [r4, #0]
 80051c2:	b91e      	cbnz	r6, 80051cc <_printf_i+0x1a4>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	f023 0320 	bic.w	r3, r3, #32
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	2310      	movs	r3, #16
 80051ce:	e7a7      	b.n	8005120 <_printf_i+0xf8>
 80051d0:	4824      	ldr	r0, [pc, #144]	; (8005264 <_printf_i+0x23c>)
 80051d2:	e7e4      	b.n	800519e <_printf_i+0x176>
 80051d4:	4615      	mov	r5, r2
 80051d6:	e7bd      	b.n	8005154 <_printf_i+0x12c>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	6826      	ldr	r6, [r4, #0]
 80051dc:	6961      	ldr	r1, [r4, #20]
 80051de:	1d18      	adds	r0, r3, #4
 80051e0:	6028      	str	r0, [r5, #0]
 80051e2:	0635      	lsls	r5, r6, #24
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0x1c4>
 80051e8:	6019      	str	r1, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <_printf_i+0x1ca>
 80051ec:	0670      	lsls	r0, r6, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0x1c0>
 80051f0:	8019      	strh	r1, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	4615      	mov	r5, r2
 80051f8:	e7bc      	b.n	8005174 <_printf_i+0x14c>
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	681d      	ldr	r5, [r3, #0]
 8005202:	6862      	ldr	r2, [r4, #4]
 8005204:	2100      	movs	r1, #0
 8005206:	4628      	mov	r0, r5
 8005208:	f7fa ffe2 	bl	80001d0 <memchr>
 800520c:	b108      	cbz	r0, 8005212 <_printf_i+0x1ea>
 800520e:	1b40      	subs	r0, r0, r5
 8005210:	6060      	str	r0, [r4, #4]
 8005212:	6863      	ldr	r3, [r4, #4]
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	2300      	movs	r3, #0
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521c:	e7aa      	b.n	8005174 <_printf_i+0x14c>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	462a      	mov	r2, r5
 8005222:	4649      	mov	r1, r9
 8005224:	4640      	mov	r0, r8
 8005226:	47d0      	blx	sl
 8005228:	3001      	adds	r0, #1
 800522a:	d0ad      	beq.n	8005188 <_printf_i+0x160>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	d413      	bmi.n	800525a <_printf_i+0x232>
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	4298      	cmp	r0, r3
 8005238:	bfb8      	it	lt
 800523a:	4618      	movlt	r0, r3
 800523c:	e7a6      	b.n	800518c <_printf_i+0x164>
 800523e:	2301      	movs	r3, #1
 8005240:	4632      	mov	r2, r6
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	47d0      	blx	sl
 8005248:	3001      	adds	r0, #1
 800524a:	d09d      	beq.n	8005188 <_printf_i+0x160>
 800524c:	3501      	adds	r5, #1
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	9903      	ldr	r1, [sp, #12]
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	42ab      	cmp	r3, r5
 8005256:	dcf2      	bgt.n	800523e <_printf_i+0x216>
 8005258:	e7eb      	b.n	8005232 <_printf_i+0x20a>
 800525a:	2500      	movs	r5, #0
 800525c:	f104 0619 	add.w	r6, r4, #25
 8005260:	e7f5      	b.n	800524e <_printf_i+0x226>
 8005262:	bf00      	nop
 8005264:	08007396 	.word	0x08007396
 8005268:	080073a7 	.word	0x080073a7

0800526c <std>:
 800526c:	2300      	movs	r3, #0
 800526e:	b510      	push	{r4, lr}
 8005270:	4604      	mov	r4, r0
 8005272:	e9c0 3300 	strd	r3, r3, [r0]
 8005276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800527a:	6083      	str	r3, [r0, #8]
 800527c:	8181      	strh	r1, [r0, #12]
 800527e:	6643      	str	r3, [r0, #100]	; 0x64
 8005280:	81c2      	strh	r2, [r0, #14]
 8005282:	6183      	str	r3, [r0, #24]
 8005284:	4619      	mov	r1, r3
 8005286:	2208      	movs	r2, #8
 8005288:	305c      	adds	r0, #92	; 0x5c
 800528a:	f000 f8f4 	bl	8005476 <memset>
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <std+0x38>)
 8005290:	6263      	str	r3, [r4, #36]	; 0x24
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <std+0x3c>)
 8005294:	62a3      	str	r3, [r4, #40]	; 0x28
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <std+0x40>)
 8005298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <std+0x44>)
 800529c:	6224      	str	r4, [r4, #32]
 800529e:	6323      	str	r3, [r4, #48]	; 0x30
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	bf00      	nop
 80052a4:	080053f1 	.word	0x080053f1
 80052a8:	08005413 	.word	0x08005413
 80052ac:	0800544b 	.word	0x0800544b
 80052b0:	0800546f 	.word	0x0800546f

080052b4 <stdio_exit_handler>:
 80052b4:	4a02      	ldr	r2, [pc, #8]	; (80052c0 <stdio_exit_handler+0xc>)
 80052b6:	4903      	ldr	r1, [pc, #12]	; (80052c4 <stdio_exit_handler+0x10>)
 80052b8:	4803      	ldr	r0, [pc, #12]	; (80052c8 <stdio_exit_handler+0x14>)
 80052ba:	f000 b869 	b.w	8005390 <_fwalk_sglue>
 80052be:	bf00      	nop
 80052c0:	20000010 	.word	0x20000010
 80052c4:	08006ef9 	.word	0x08006ef9
 80052c8:	2000001c 	.word	0x2000001c

080052cc <cleanup_stdio>:
 80052cc:	6841      	ldr	r1, [r0, #4]
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <cleanup_stdio+0x34>)
 80052d0:	4299      	cmp	r1, r3
 80052d2:	b510      	push	{r4, lr}
 80052d4:	4604      	mov	r4, r0
 80052d6:	d001      	beq.n	80052dc <cleanup_stdio+0x10>
 80052d8:	f001 fe0e 	bl	8006ef8 <_fflush_r>
 80052dc:	68a1      	ldr	r1, [r4, #8]
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <cleanup_stdio+0x38>)
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d002      	beq.n	80052ea <cleanup_stdio+0x1e>
 80052e4:	4620      	mov	r0, r4
 80052e6:	f001 fe07 	bl	8006ef8 <_fflush_r>
 80052ea:	68e1      	ldr	r1, [r4, #12]
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <cleanup_stdio+0x3c>)
 80052ee:	4299      	cmp	r1, r3
 80052f0:	d004      	beq.n	80052fc <cleanup_stdio+0x30>
 80052f2:	4620      	mov	r0, r4
 80052f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f8:	f001 bdfe 	b.w	8006ef8 <_fflush_r>
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop
 8005300:	20000628 	.word	0x20000628
 8005304:	20000690 	.word	0x20000690
 8005308:	200006f8 	.word	0x200006f8

0800530c <global_stdio_init.part.0>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4b0b      	ldr	r3, [pc, #44]	; (800533c <global_stdio_init.part.0+0x30>)
 8005310:	4c0b      	ldr	r4, [pc, #44]	; (8005340 <global_stdio_init.part.0+0x34>)
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <global_stdio_init.part.0+0x38>)
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	4620      	mov	r0, r4
 8005318:	2200      	movs	r2, #0
 800531a:	2104      	movs	r1, #4
 800531c:	f7ff ffa6 	bl	800526c <std>
 8005320:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005324:	2201      	movs	r2, #1
 8005326:	2109      	movs	r1, #9
 8005328:	f7ff ffa0 	bl	800526c <std>
 800532c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005330:	2202      	movs	r2, #2
 8005332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005336:	2112      	movs	r1, #18
 8005338:	f7ff bf98 	b.w	800526c <std>
 800533c:	20000760 	.word	0x20000760
 8005340:	20000628 	.word	0x20000628
 8005344:	080052b5 	.word	0x080052b5

08005348 <__sfp_lock_acquire>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__sfp_lock_acquire+0x8>)
 800534a:	f000 b911 	b.w	8005570 <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	20000769 	.word	0x20000769

08005354 <__sfp_lock_release>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__sfp_lock_release+0x8>)
 8005356:	f000 b90c 	b.w	8005572 <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	20000769 	.word	0x20000769

08005360 <__sinit>:
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
 8005364:	f7ff fff0 	bl	8005348 <__sfp_lock_acquire>
 8005368:	6a23      	ldr	r3, [r4, #32]
 800536a:	b11b      	cbz	r3, 8005374 <__sinit+0x14>
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005370:	f7ff bff0 	b.w	8005354 <__sfp_lock_release>
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <__sinit+0x28>)
 8005376:	6223      	str	r3, [r4, #32]
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <__sinit+0x2c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f5      	bne.n	800536c <__sinit+0xc>
 8005380:	f7ff ffc4 	bl	800530c <global_stdio_init.part.0>
 8005384:	e7f2      	b.n	800536c <__sinit+0xc>
 8005386:	bf00      	nop
 8005388:	080052cd 	.word	0x080052cd
 800538c:	20000760 	.word	0x20000760

08005390 <_fwalk_sglue>:
 8005390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005394:	4607      	mov	r7, r0
 8005396:	4688      	mov	r8, r1
 8005398:	4614      	mov	r4, r2
 800539a:	2600      	movs	r6, #0
 800539c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a0:	f1b9 0901 	subs.w	r9, r9, #1
 80053a4:	d505      	bpl.n	80053b2 <_fwalk_sglue+0x22>
 80053a6:	6824      	ldr	r4, [r4, #0]
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d1f7      	bne.n	800539c <_fwalk_sglue+0xc>
 80053ac:	4630      	mov	r0, r6
 80053ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d907      	bls.n	80053c8 <_fwalk_sglue+0x38>
 80053b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053bc:	3301      	adds	r3, #1
 80053be:	d003      	beq.n	80053c8 <_fwalk_sglue+0x38>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	4306      	orrs	r6, r0
 80053c8:	3568      	adds	r5, #104	; 0x68
 80053ca:	e7e9      	b.n	80053a0 <_fwalk_sglue+0x10>

080053cc <iprintf>:
 80053cc:	b40f      	push	{r0, r1, r2, r3}
 80053ce:	b507      	push	{r0, r1, r2, lr}
 80053d0:	4906      	ldr	r1, [pc, #24]	; (80053ec <iprintf+0x20>)
 80053d2:	ab04      	add	r3, sp, #16
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053da:	6881      	ldr	r1, [r0, #8]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	f001 fbeb 	bl	8006bb8 <_vfiprintf_r>
 80053e2:	b003      	add	sp, #12
 80053e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e8:	b004      	add	sp, #16
 80053ea:	4770      	bx	lr
 80053ec:	20000068 	.word	0x20000068

080053f0 <__sread>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	f000 f86c 	bl	80054d4 <_read_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	bfab      	itete	ge
 8005400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005402:	89a3      	ldrhlt	r3, [r4, #12]
 8005404:	181b      	addge	r3, r3, r0
 8005406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540a:	bfac      	ite	ge
 800540c:	6563      	strge	r3, [r4, #84]	; 0x54
 800540e:	81a3      	strhlt	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__swrite>:
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	461f      	mov	r7, r3
 8005418:	898b      	ldrh	r3, [r1, #12]
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	4605      	mov	r5, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4616      	mov	r6, r2
 8005422:	d505      	bpl.n	8005430 <__swrite+0x1e>
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	2302      	movs	r3, #2
 800542a:	2200      	movs	r2, #0
 800542c:	f000 f840 	bl	80054b0 <_lseek_r>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	4628      	mov	r0, r5
 8005442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	f000 b857 	b.w	80054f8 <_write_r>

0800544a <__sseek>:
 800544a:	b510      	push	{r4, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 f82d 	bl	80054b0 <_lseek_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	bf15      	itete	ne
 800545c:	6560      	strne	r0, [r4, #84]	; 0x54
 800545e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005466:	81a3      	strheq	r3, [r4, #12]
 8005468:	bf18      	it	ne
 800546a:	81a3      	strhne	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__sclose>:
 800546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005472:	f000 b80d 	b.w	8005490 <_close_r>

08005476 <memset>:
 8005476:	4402      	add	r2, r0
 8005478:	4603      	mov	r3, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	d100      	bne.n	8005480 <memset+0xa>
 800547e:	4770      	bx	lr
 8005480:	f803 1b01 	strb.w	r1, [r3], #1
 8005484:	e7f9      	b.n	800547a <memset+0x4>
	...

08005488 <_localeconv_r>:
 8005488:	4800      	ldr	r0, [pc, #0]	; (800548c <_localeconv_r+0x4>)
 800548a:	4770      	bx	lr
 800548c:	2000015c 	.word	0x2000015c

08005490 <_close_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	; (80054ac <_close_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fb fe3f 	bl	800111e <_close>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_close_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_close_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000764 	.word	0x20000764

080054b0 <_lseek_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	; (80054d0 <_lseek_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fb fe54 	bl	800116c <_lseek>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_lseek_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_lseek_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000764 	.word	0x20000764

080054d4 <_read_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	; (80054f4 <_read_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fb fdfe 	bl	80010e4 <_read>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_read_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_read_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000764 	.word	0x20000764

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fb fc50 	bl	8000dac <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000764 	.word	0x20000764

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	; (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000068 	.word	0x20000068

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	; (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	; (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	; (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	; (800556c <__libc_init_array+0x44>)
 800553c:	f001 feee 	bl	800731c <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	080076f4 	.word	0x080076f4
 8005564:	080076f4 	.word	0x080076f4
 8005568:	080076f4 	.word	0x080076f4
 800556c:	080076f8 	.word	0x080076f8

08005570 <__retarget_lock_acquire_recursive>:
 8005570:	4770      	bx	lr

08005572 <__retarget_lock_release_recursive>:
 8005572:	4770      	bx	lr

08005574 <quorem>:
 8005574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	6903      	ldr	r3, [r0, #16]
 800557a:	690c      	ldr	r4, [r1, #16]
 800557c:	42a3      	cmp	r3, r4
 800557e:	4607      	mov	r7, r0
 8005580:	db7e      	blt.n	8005680 <quorem+0x10c>
 8005582:	3c01      	subs	r4, #1
 8005584:	f101 0814 	add.w	r8, r1, #20
 8005588:	f100 0514 	add.w	r5, r0, #20
 800558c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559a:	3301      	adds	r3, #1
 800559c:	429a      	cmp	r2, r3
 800559e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80055aa:	d331      	bcc.n	8005610 <quorem+0x9c>
 80055ac:	f04f 0e00 	mov.w	lr, #0
 80055b0:	4640      	mov	r0, r8
 80055b2:	46ac      	mov	ip, r5
 80055b4:	46f2      	mov	sl, lr
 80055b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80055ba:	b293      	uxth	r3, r2
 80055bc:	fb06 e303 	mla	r3, r6, r3, lr
 80055c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055c4:	0c1a      	lsrs	r2, r3, #16
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ebaa 0303 	sub.w	r3, sl, r3
 80055cc:	f8dc a000 	ldr.w	sl, [ip]
 80055d0:	fa13 f38a 	uxtah	r3, r3, sl
 80055d4:	fb06 220e 	mla	r2, r6, lr, r2
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055e0:	b292      	uxth	r2, r2
 80055e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80055ee:	4581      	cmp	r9, r0
 80055f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055f4:	f84c 3b04 	str.w	r3, [ip], #4
 80055f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055fc:	d2db      	bcs.n	80055b6 <quorem+0x42>
 80055fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8005602:	b92b      	cbnz	r3, 8005610 <quorem+0x9c>
 8005604:	9b01      	ldr	r3, [sp, #4]
 8005606:	3b04      	subs	r3, #4
 8005608:	429d      	cmp	r5, r3
 800560a:	461a      	mov	r2, r3
 800560c:	d32c      	bcc.n	8005668 <quorem+0xf4>
 800560e:	613c      	str	r4, [r7, #16]
 8005610:	4638      	mov	r0, r7
 8005612:	f001 f9a7 	bl	8006964 <__mcmp>
 8005616:	2800      	cmp	r0, #0
 8005618:	db22      	blt.n	8005660 <quorem+0xec>
 800561a:	3601      	adds	r6, #1
 800561c:	4629      	mov	r1, r5
 800561e:	2000      	movs	r0, #0
 8005620:	f858 2b04 	ldr.w	r2, [r8], #4
 8005624:	f8d1 c000 	ldr.w	ip, [r1]
 8005628:	b293      	uxth	r3, r2
 800562a:	1ac3      	subs	r3, r0, r3
 800562c:	0c12      	lsrs	r2, r2, #16
 800562e:	fa13 f38c 	uxtah	r3, r3, ip
 8005632:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005636:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005640:	45c1      	cmp	r9, r8
 8005642:	f841 3b04 	str.w	r3, [r1], #4
 8005646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800564a:	d2e9      	bcs.n	8005620 <quorem+0xac>
 800564c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005654:	b922      	cbnz	r2, 8005660 <quorem+0xec>
 8005656:	3b04      	subs	r3, #4
 8005658:	429d      	cmp	r5, r3
 800565a:	461a      	mov	r2, r3
 800565c:	d30a      	bcc.n	8005674 <quorem+0x100>
 800565e:	613c      	str	r4, [r7, #16]
 8005660:	4630      	mov	r0, r6
 8005662:	b003      	add	sp, #12
 8005664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	3b04      	subs	r3, #4
 800566c:	2a00      	cmp	r2, #0
 800566e:	d1ce      	bne.n	800560e <quorem+0x9a>
 8005670:	3c01      	subs	r4, #1
 8005672:	e7c9      	b.n	8005608 <quorem+0x94>
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	3b04      	subs	r3, #4
 8005678:	2a00      	cmp	r2, #0
 800567a:	d1f0      	bne.n	800565e <quorem+0xea>
 800567c:	3c01      	subs	r4, #1
 800567e:	e7eb      	b.n	8005658 <quorem+0xe4>
 8005680:	2000      	movs	r0, #0
 8005682:	e7ee      	b.n	8005662 <quorem+0xee>
 8005684:	0000      	movs	r0, r0
	...

08005688 <_dtoa_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	ed2d 8b04 	vpush	{d8-d9}
 8005690:	69c5      	ldr	r5, [r0, #28]
 8005692:	b093      	sub	sp, #76	; 0x4c
 8005694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005698:	ec57 6b10 	vmov	r6, r7, d0
 800569c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056a0:	9107      	str	r1, [sp, #28]
 80056a2:	4604      	mov	r4, r0
 80056a4:	920a      	str	r2, [sp, #40]	; 0x28
 80056a6:	930d      	str	r3, [sp, #52]	; 0x34
 80056a8:	b975      	cbnz	r5, 80056c8 <_dtoa_r+0x40>
 80056aa:	2010      	movs	r0, #16
 80056ac:	f000 fe2a 	bl	8006304 <malloc>
 80056b0:	4602      	mov	r2, r0
 80056b2:	61e0      	str	r0, [r4, #28]
 80056b4:	b920      	cbnz	r0, 80056c0 <_dtoa_r+0x38>
 80056b6:	4bae      	ldr	r3, [pc, #696]	; (8005970 <_dtoa_r+0x2e8>)
 80056b8:	21ef      	movs	r1, #239	; 0xef
 80056ba:	48ae      	ldr	r0, [pc, #696]	; (8005974 <_dtoa_r+0x2ec>)
 80056bc:	f001 fcf8 	bl	80070b0 <__assert_func>
 80056c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056c4:	6005      	str	r5, [r0, #0]
 80056c6:	60c5      	str	r5, [r0, #12]
 80056c8:	69e3      	ldr	r3, [r4, #28]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	b151      	cbz	r1, 80056e4 <_dtoa_r+0x5c>
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	604a      	str	r2, [r1, #4]
 80056d2:	2301      	movs	r3, #1
 80056d4:	4093      	lsls	r3, r2
 80056d6:	608b      	str	r3, [r1, #8]
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 ff07 	bl	80064ec <_Bfree>
 80056de:	69e3      	ldr	r3, [r4, #28]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	1e3b      	subs	r3, r7, #0
 80056e6:	bfbb      	ittet	lt
 80056e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	9303      	strlt	r3, [sp, #12]
 80056ee:	2300      	movge	r3, #0
 80056f0:	2201      	movlt	r2, #1
 80056f2:	bfac      	ite	ge
 80056f4:	f8c8 3000 	strge.w	r3, [r8]
 80056f8:	f8c8 2000 	strlt.w	r2, [r8]
 80056fc:	4b9e      	ldr	r3, [pc, #632]	; (8005978 <_dtoa_r+0x2f0>)
 80056fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005702:	ea33 0308 	bics.w	r3, r3, r8
 8005706:	d11b      	bne.n	8005740 <_dtoa_r+0xb8>
 8005708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800570a:	f242 730f 	movw	r3, #9999	; 0x270f
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005714:	4333      	orrs	r3, r6
 8005716:	f000 8593 	beq.w	8006240 <_dtoa_r+0xbb8>
 800571a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800571c:	b963      	cbnz	r3, 8005738 <_dtoa_r+0xb0>
 800571e:	4b97      	ldr	r3, [pc, #604]	; (800597c <_dtoa_r+0x2f4>)
 8005720:	e027      	b.n	8005772 <_dtoa_r+0xea>
 8005722:	4b97      	ldr	r3, [pc, #604]	; (8005980 <_dtoa_r+0x2f8>)
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	9800      	ldr	r0, [sp, #0]
 800572e:	b013      	add	sp, #76	; 0x4c
 8005730:	ecbd 8b04 	vpop	{d8-d9}
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	4b90      	ldr	r3, [pc, #576]	; (800597c <_dtoa_r+0x2f4>)
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	3303      	adds	r3, #3
 800573e:	e7f3      	b.n	8005728 <_dtoa_r+0xa0>
 8005740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005744:	2200      	movs	r2, #0
 8005746:	ec51 0b17 	vmov	r0, r1, d7
 800574a:	eeb0 8a47 	vmov.f32	s16, s14
 800574e:	eef0 8a67 	vmov.f32	s17, s15
 8005752:	2300      	movs	r3, #0
 8005754:	f7fb f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005758:	4681      	mov	r9, r0
 800575a:	b160      	cbz	r0, 8005776 <_dtoa_r+0xee>
 800575c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800575e:	2301      	movs	r3, #1
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8568 	beq.w	800623a <_dtoa_r+0xbb2>
 800576a:	4b86      	ldr	r3, [pc, #536]	; (8005984 <_dtoa_r+0x2fc>)
 800576c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	3b01      	subs	r3, #1
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	e7da      	b.n	800572c <_dtoa_r+0xa4>
 8005776:	aa10      	add	r2, sp, #64	; 0x40
 8005778:	a911      	add	r1, sp, #68	; 0x44
 800577a:	4620      	mov	r0, r4
 800577c:	eeb0 0a48 	vmov.f32	s0, s16
 8005780:	eef0 0a68 	vmov.f32	s1, s17
 8005784:	f001 f994 	bl	8006ab0 <__d2b>
 8005788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800578c:	4682      	mov	sl, r0
 800578e:	2d00      	cmp	r5, #0
 8005790:	d07f      	beq.n	8005892 <_dtoa_r+0x20a>
 8005792:	ee18 3a90 	vmov	r3, s17
 8005796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800579e:	ec51 0b18 	vmov	r0, r1, d8
 80057a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80057a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80057ae:	4619      	mov	r1, r3
 80057b0:	2200      	movs	r2, #0
 80057b2:	4b75      	ldr	r3, [pc, #468]	; (8005988 <_dtoa_r+0x300>)
 80057b4:	f7fa fd68 	bl	8000288 <__aeabi_dsub>
 80057b8:	a367      	add	r3, pc, #412	; (adr r3, 8005958 <_dtoa_r+0x2d0>)
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fa ff1b 	bl	80005f8 <__aeabi_dmul>
 80057c2:	a367      	add	r3, pc, #412	; (adr r3, 8005960 <_dtoa_r+0x2d8>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fd60 	bl	800028c <__adddf3>
 80057cc:	4606      	mov	r6, r0
 80057ce:	4628      	mov	r0, r5
 80057d0:	460f      	mov	r7, r1
 80057d2:	f7fa fea7 	bl	8000524 <__aeabi_i2d>
 80057d6:	a364      	add	r3, pc, #400	; (adr r3, 8005968 <_dtoa_r+0x2e0>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4630      	mov	r0, r6
 80057e6:	4639      	mov	r1, r7
 80057e8:	f7fa fd50 	bl	800028c <__adddf3>
 80057ec:	4606      	mov	r6, r0
 80057ee:	460f      	mov	r7, r1
 80057f0:	f7fb f9b2 	bl	8000b58 <__aeabi_d2iz>
 80057f4:	2200      	movs	r2, #0
 80057f6:	4683      	mov	fp, r0
 80057f8:	2300      	movs	r3, #0
 80057fa:	4630      	mov	r0, r6
 80057fc:	4639      	mov	r1, r7
 80057fe:	f7fb f96d 	bl	8000adc <__aeabi_dcmplt>
 8005802:	b148      	cbz	r0, 8005818 <_dtoa_r+0x190>
 8005804:	4658      	mov	r0, fp
 8005806:	f7fa fe8d 	bl	8000524 <__aeabi_i2d>
 800580a:	4632      	mov	r2, r6
 800580c:	463b      	mov	r3, r7
 800580e:	f7fb f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005812:	b908      	cbnz	r0, 8005818 <_dtoa_r+0x190>
 8005814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005818:	f1bb 0f16 	cmp.w	fp, #22
 800581c:	d857      	bhi.n	80058ce <_dtoa_r+0x246>
 800581e:	4b5b      	ldr	r3, [pc, #364]	; (800598c <_dtoa_r+0x304>)
 8005820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	ec51 0b18 	vmov	r0, r1, d8
 800582c:	f7fb f956 	bl	8000adc <__aeabi_dcmplt>
 8005830:	2800      	cmp	r0, #0
 8005832:	d04e      	beq.n	80058d2 <_dtoa_r+0x24a>
 8005834:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005838:	2300      	movs	r3, #0
 800583a:	930c      	str	r3, [sp, #48]	; 0x30
 800583c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800583e:	1b5b      	subs	r3, r3, r5
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	bf45      	ittet	mi
 8005844:	f1c3 0301 	rsbmi	r3, r3, #1
 8005848:	9305      	strmi	r3, [sp, #20]
 800584a:	2300      	movpl	r3, #0
 800584c:	2300      	movmi	r3, #0
 800584e:	9206      	str	r2, [sp, #24]
 8005850:	bf54      	ite	pl
 8005852:	9305      	strpl	r3, [sp, #20]
 8005854:	9306      	strmi	r3, [sp, #24]
 8005856:	f1bb 0f00 	cmp.w	fp, #0
 800585a:	db3c      	blt.n	80058d6 <_dtoa_r+0x24e>
 800585c:	9b06      	ldr	r3, [sp, #24]
 800585e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005862:	445b      	add	r3, fp
 8005864:	9306      	str	r3, [sp, #24]
 8005866:	2300      	movs	r3, #0
 8005868:	9308      	str	r3, [sp, #32]
 800586a:	9b07      	ldr	r3, [sp, #28]
 800586c:	2b09      	cmp	r3, #9
 800586e:	d868      	bhi.n	8005942 <_dtoa_r+0x2ba>
 8005870:	2b05      	cmp	r3, #5
 8005872:	bfc4      	itt	gt
 8005874:	3b04      	subgt	r3, #4
 8005876:	9307      	strgt	r3, [sp, #28]
 8005878:	9b07      	ldr	r3, [sp, #28]
 800587a:	f1a3 0302 	sub.w	r3, r3, #2
 800587e:	bfcc      	ite	gt
 8005880:	2500      	movgt	r5, #0
 8005882:	2501      	movle	r5, #1
 8005884:	2b03      	cmp	r3, #3
 8005886:	f200 8085 	bhi.w	8005994 <_dtoa_r+0x30c>
 800588a:	e8df f003 	tbb	[pc, r3]
 800588e:	3b2e      	.short	0x3b2e
 8005890:	5839      	.short	0x5839
 8005892:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005896:	441d      	add	r5, r3
 8005898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800589c:	2b20      	cmp	r3, #32
 800589e:	bfc1      	itttt	gt
 80058a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80058a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80058ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80058b0:	bfd6      	itet	le
 80058b2:	f1c3 0320 	rsble	r3, r3, #32
 80058b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80058ba:	fa06 f003 	lslle.w	r0, r6, r3
 80058be:	f7fa fe21 	bl	8000504 <__aeabi_ui2d>
 80058c2:	2201      	movs	r2, #1
 80058c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80058c8:	3d01      	subs	r5, #1
 80058ca:	920e      	str	r2, [sp, #56]	; 0x38
 80058cc:	e76f      	b.n	80057ae <_dtoa_r+0x126>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e7b3      	b.n	800583a <_dtoa_r+0x1b2>
 80058d2:	900c      	str	r0, [sp, #48]	; 0x30
 80058d4:	e7b2      	b.n	800583c <_dtoa_r+0x1b4>
 80058d6:	9b05      	ldr	r3, [sp, #20]
 80058d8:	eba3 030b 	sub.w	r3, r3, fp
 80058dc:	9305      	str	r3, [sp, #20]
 80058de:	f1cb 0300 	rsb	r3, fp, #0
 80058e2:	9308      	str	r3, [sp, #32]
 80058e4:	2300      	movs	r3, #0
 80058e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e8:	e7bf      	b.n	800586a <_dtoa_r+0x1e2>
 80058ea:	2300      	movs	r3, #0
 80058ec:	9309      	str	r3, [sp, #36]	; 0x24
 80058ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc52      	bgt.n	800599a <_dtoa_r+0x312>
 80058f4:	2301      	movs	r3, #1
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	461a      	mov	r2, r3
 80058fc:	920a      	str	r2, [sp, #40]	; 0x28
 80058fe:	e00b      	b.n	8005918 <_dtoa_r+0x290>
 8005900:	2301      	movs	r3, #1
 8005902:	e7f3      	b.n	80058ec <_dtoa_r+0x264>
 8005904:	2300      	movs	r3, #0
 8005906:	9309      	str	r3, [sp, #36]	; 0x24
 8005908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590a:	445b      	add	r3, fp
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	3301      	adds	r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	bfb8      	it	lt
 8005916:	2301      	movlt	r3, #1
 8005918:	69e0      	ldr	r0, [r4, #28]
 800591a:	2100      	movs	r1, #0
 800591c:	2204      	movs	r2, #4
 800591e:	f102 0614 	add.w	r6, r2, #20
 8005922:	429e      	cmp	r6, r3
 8005924:	d93d      	bls.n	80059a2 <_dtoa_r+0x31a>
 8005926:	6041      	str	r1, [r0, #4]
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fd9f 	bl	800646c <_Balloc>
 800592e:	9000      	str	r0, [sp, #0]
 8005930:	2800      	cmp	r0, #0
 8005932:	d139      	bne.n	80059a8 <_dtoa_r+0x320>
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <_dtoa_r+0x308>)
 8005936:	4602      	mov	r2, r0
 8005938:	f240 11af 	movw	r1, #431	; 0x1af
 800593c:	e6bd      	b.n	80056ba <_dtoa_r+0x32>
 800593e:	2301      	movs	r3, #1
 8005940:	e7e1      	b.n	8005906 <_dtoa_r+0x27e>
 8005942:	2501      	movs	r5, #1
 8005944:	2300      	movs	r3, #0
 8005946:	9307      	str	r3, [sp, #28]
 8005948:	9509      	str	r5, [sp, #36]	; 0x24
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	2200      	movs	r2, #0
 8005954:	2312      	movs	r3, #18
 8005956:	e7d1      	b.n	80058fc <_dtoa_r+0x274>
 8005958:	636f4361 	.word	0x636f4361
 800595c:	3fd287a7 	.word	0x3fd287a7
 8005960:	8b60c8b3 	.word	0x8b60c8b3
 8005964:	3fc68a28 	.word	0x3fc68a28
 8005968:	509f79fb 	.word	0x509f79fb
 800596c:	3fd34413 	.word	0x3fd34413
 8005970:	080073c5 	.word	0x080073c5
 8005974:	080073dc 	.word	0x080073dc
 8005978:	7ff00000 	.word	0x7ff00000
 800597c:	080073c1 	.word	0x080073c1
 8005980:	080073b8 	.word	0x080073b8
 8005984:	08007395 	.word	0x08007395
 8005988:	3ff80000 	.word	0x3ff80000
 800598c:	080074c8 	.word	0x080074c8
 8005990:	08007434 	.word	0x08007434
 8005994:	2301      	movs	r3, #1
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	e7d7      	b.n	800594a <_dtoa_r+0x2c2>
 800599a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	e7ba      	b.n	8005918 <_dtoa_r+0x290>
 80059a2:	3101      	adds	r1, #1
 80059a4:	0052      	lsls	r2, r2, #1
 80059a6:	e7ba      	b.n	800591e <_dtoa_r+0x296>
 80059a8:	69e3      	ldr	r3, [r4, #28]
 80059aa:	9a00      	ldr	r2, [sp, #0]
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	2b0e      	cmp	r3, #14
 80059b2:	f200 80a8 	bhi.w	8005b06 <_dtoa_r+0x47e>
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	f000 80a5 	beq.w	8005b06 <_dtoa_r+0x47e>
 80059bc:	f1bb 0f00 	cmp.w	fp, #0
 80059c0:	dd38      	ble.n	8005a34 <_dtoa_r+0x3ac>
 80059c2:	4bc0      	ldr	r3, [pc, #768]	; (8005cc4 <_dtoa_r+0x63c>)
 80059c4:	f00b 020f 	and.w	r2, fp, #15
 80059c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80059d8:	d019      	beq.n	8005a0e <_dtoa_r+0x386>
 80059da:	4bbb      	ldr	r3, [pc, #748]	; (8005cc8 <_dtoa_r+0x640>)
 80059dc:	ec51 0b18 	vmov	r0, r1, d8
 80059e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059e4:	f7fa ff32 	bl	800084c <__aeabi_ddiv>
 80059e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ec:	f008 080f 	and.w	r8, r8, #15
 80059f0:	2503      	movs	r5, #3
 80059f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005cc8 <_dtoa_r+0x640>
 80059f6:	f1b8 0f00 	cmp.w	r8, #0
 80059fa:	d10a      	bne.n	8005a12 <_dtoa_r+0x38a>
 80059fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	f7fa ff22 	bl	800084c <__aeabi_ddiv>
 8005a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a0c:	e02b      	b.n	8005a66 <_dtoa_r+0x3de>
 8005a0e:	2502      	movs	r5, #2
 8005a10:	e7ef      	b.n	80059f2 <_dtoa_r+0x36a>
 8005a12:	f018 0f01 	tst.w	r8, #1
 8005a16:	d008      	beq.n	8005a2a <_dtoa_r+0x3a2>
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a20:	f7fa fdea 	bl	80005f8 <__aeabi_dmul>
 8005a24:	3501      	adds	r5, #1
 8005a26:	4606      	mov	r6, r0
 8005a28:	460f      	mov	r7, r1
 8005a2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a2e:	f109 0908 	add.w	r9, r9, #8
 8005a32:	e7e0      	b.n	80059f6 <_dtoa_r+0x36e>
 8005a34:	f000 809f 	beq.w	8005b76 <_dtoa_r+0x4ee>
 8005a38:	f1cb 0600 	rsb	r6, fp, #0
 8005a3c:	4ba1      	ldr	r3, [pc, #644]	; (8005cc4 <_dtoa_r+0x63c>)
 8005a3e:	4fa2      	ldr	r7, [pc, #648]	; (8005cc8 <_dtoa_r+0x640>)
 8005a40:	f006 020f 	and.w	r2, r6, #15
 8005a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	ec51 0b18 	vmov	r0, r1, d8
 8005a50:	f7fa fdd2 	bl	80005f8 <__aeabi_dmul>
 8005a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a58:	1136      	asrs	r6, r6, #4
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2502      	movs	r5, #2
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	d17e      	bne.n	8005b60 <_dtoa_r+0x4d8>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1d0      	bne.n	8005a08 <_dtoa_r+0x380>
 8005a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8084 	beq.w	8005b7a <_dtoa_r+0x4f2>
 8005a72:	4b96      	ldr	r3, [pc, #600]	; (8005ccc <_dtoa_r+0x644>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fb f82f 	bl	8000adc <__aeabi_dcmplt>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d07b      	beq.n	8005b7a <_dtoa_r+0x4f2>
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d078      	beq.n	8005b7a <_dtoa_r+0x4f2>
 8005a88:	9b01      	ldr	r3, [sp, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dd39      	ble.n	8005b02 <_dtoa_r+0x47a>
 8005a8e:	4b90      	ldr	r3, [pc, #576]	; (8005cd0 <_dtoa_r+0x648>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f7fa fdaf 	bl	80005f8 <__aeabi_dmul>
 8005a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a9e:	9e01      	ldr	r6, [sp, #4]
 8005aa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fd3a 	bl	8000524 <__aeabi_i2d>
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	f7fa fda0 	bl	80005f8 <__aeabi_dmul>
 8005ab8:	4b86      	ldr	r3, [pc, #536]	; (8005cd4 <_dtoa_r+0x64c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	f7fa fbe6 	bl	800028c <__adddf3>
 8005ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac8:	9303      	str	r3, [sp, #12]
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	d158      	bne.n	8005b80 <_dtoa_r+0x4f8>
 8005ace:	4b82      	ldr	r3, [pc, #520]	; (8005cd8 <_dtoa_r+0x650>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	f7fa fbd7 	bl	8000288 <__aeabi_dsub>
 8005ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ade:	4680      	mov	r8, r0
 8005ae0:	4689      	mov	r9, r1
 8005ae2:	f7fb f819 	bl	8000b18 <__aeabi_dcmpgt>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f040 8296 	bne.w	8006018 <_dtoa_r+0x990>
 8005aec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005af0:	4640      	mov	r0, r8
 8005af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005af6:	4649      	mov	r1, r9
 8005af8:	f7fa fff0 	bl	8000adc <__aeabi_dcmplt>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f040 8289 	bne.w	8006014 <_dtoa_r+0x98c>
 8005b02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f2c0 814e 	blt.w	8005daa <_dtoa_r+0x722>
 8005b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005b12:	f300 814a 	bgt.w	8005daa <_dtoa_r+0x722>
 8005b16:	4b6b      	ldr	r3, [pc, #428]	; (8005cc4 <_dtoa_r+0x63c>)
 8005b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f280 80dc 	bge.w	8005ce0 <_dtoa_r+0x658>
 8005b28:	9b04      	ldr	r3, [sp, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f300 80d8 	bgt.w	8005ce0 <_dtoa_r+0x658>
 8005b30:	f040 826f 	bne.w	8006012 <_dtoa_r+0x98a>
 8005b34:	4b68      	ldr	r3, [pc, #416]	; (8005cd8 <_dtoa_r+0x650>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fd5c 	bl	80005f8 <__aeabi_dmul>
 8005b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b44:	f7fa ffde 	bl	8000b04 <__aeabi_dcmpge>
 8005b48:	9e04      	ldr	r6, [sp, #16]
 8005b4a:	4637      	mov	r7, r6
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f040 8245 	bne.w	8005fdc <_dtoa_r+0x954>
 8005b52:	9d00      	ldr	r5, [sp, #0]
 8005b54:	2331      	movs	r3, #49	; 0x31
 8005b56:	f805 3b01 	strb.w	r3, [r5], #1
 8005b5a:	f10b 0b01 	add.w	fp, fp, #1
 8005b5e:	e241      	b.n	8005fe4 <_dtoa_r+0x95c>
 8005b60:	07f2      	lsls	r2, r6, #31
 8005b62:	d505      	bpl.n	8005b70 <_dtoa_r+0x4e8>
 8005b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b68:	f7fa fd46 	bl	80005f8 <__aeabi_dmul>
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	2301      	movs	r3, #1
 8005b70:	1076      	asrs	r6, r6, #1
 8005b72:	3708      	adds	r7, #8
 8005b74:	e773      	b.n	8005a5e <_dtoa_r+0x3d6>
 8005b76:	2502      	movs	r5, #2
 8005b78:	e775      	b.n	8005a66 <_dtoa_r+0x3de>
 8005b7a:	9e04      	ldr	r6, [sp, #16]
 8005b7c:	465f      	mov	r7, fp
 8005b7e:	e792      	b.n	8005aa6 <_dtoa_r+0x41e>
 8005b80:	9900      	ldr	r1, [sp, #0]
 8005b82:	4b50      	ldr	r3, [pc, #320]	; (8005cc4 <_dtoa_r+0x63c>)
 8005b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b88:	4431      	add	r1, r6
 8005b8a:	9102      	str	r1, [sp, #8]
 8005b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b8e:	eeb0 9a47 	vmov.f32	s18, s14
 8005b92:	eef0 9a67 	vmov.f32	s19, s15
 8005b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	d044      	beq.n	8005c2c <_dtoa_r+0x5a4>
 8005ba2:	494e      	ldr	r1, [pc, #312]	; (8005cdc <_dtoa_r+0x654>)
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f7fa fe51 	bl	800084c <__aeabi_ddiv>
 8005baa:	ec53 2b19 	vmov	r2, r3, d9
 8005bae:	f7fa fb6b 	bl	8000288 <__aeabi_dsub>
 8005bb2:	9d00      	ldr	r5, [sp, #0]
 8005bb4:	ec41 0b19 	vmov	d9, r0, r1
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4640      	mov	r0, r8
 8005bbc:	f7fa ffcc 	bl	8000b58 <__aeabi_d2iz>
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	f7fa fcaf 	bl	8000524 <__aeabi_i2d>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fb5b 	bl	8000288 <__aeabi_dsub>
 8005bd2:	3630      	adds	r6, #48	; 0x30
 8005bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005bd8:	ec53 2b19 	vmov	r2, r3, d9
 8005bdc:	4680      	mov	r8, r0
 8005bde:	4689      	mov	r9, r1
 8005be0:	f7fa ff7c 	bl	8000adc <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d164      	bne.n	8005cb2 <_dtoa_r+0x62a>
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	4937      	ldr	r1, [pc, #220]	; (8005ccc <_dtoa_r+0x644>)
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f7fa fb4a 	bl	8000288 <__aeabi_dsub>
 8005bf4:	ec53 2b19 	vmov	r2, r3, d9
 8005bf8:	f7fa ff70 	bl	8000adc <__aeabi_dcmplt>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f040 80b6 	bne.w	8005d6e <_dtoa_r+0x6e6>
 8005c02:	9b02      	ldr	r3, [sp, #8]
 8005c04:	429d      	cmp	r5, r3
 8005c06:	f43f af7c 	beq.w	8005b02 <_dtoa_r+0x47a>
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <_dtoa_r+0x648>)
 8005c0c:	ec51 0b19 	vmov	r0, r1, d9
 8005c10:	2200      	movs	r2, #0
 8005c12:	f7fa fcf1 	bl	80005f8 <__aeabi_dmul>
 8005c16:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <_dtoa_r+0x648>)
 8005c18:	ec41 0b19 	vmov	d9, r0, r1
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4640      	mov	r0, r8
 8005c20:	4649      	mov	r1, r9
 8005c22:	f7fa fce9 	bl	80005f8 <__aeabi_dmul>
 8005c26:	4680      	mov	r8, r0
 8005c28:	4689      	mov	r9, r1
 8005c2a:	e7c5      	b.n	8005bb8 <_dtoa_r+0x530>
 8005c2c:	ec51 0b17 	vmov	r0, r1, d7
 8005c30:	f7fa fce2 	bl	80005f8 <__aeabi_dmul>
 8005c34:	9b02      	ldr	r3, [sp, #8]
 8005c36:	9d00      	ldr	r5, [sp, #0]
 8005c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c3a:	ec41 0b19 	vmov	d9, r0, r1
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	f7fa ff89 	bl	8000b58 <__aeabi_d2iz>
 8005c46:	4606      	mov	r6, r0
 8005c48:	f7fa fc6c 	bl	8000524 <__aeabi_i2d>
 8005c4c:	3630      	adds	r6, #48	; 0x30
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fb17 	bl	8000288 <__aeabi_dsub>
 8005c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c5e:	9b02      	ldr	r3, [sp, #8]
 8005c60:	429d      	cmp	r5, r3
 8005c62:	4680      	mov	r8, r0
 8005c64:	4689      	mov	r9, r1
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	d124      	bne.n	8005cb6 <_dtoa_r+0x62e>
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <_dtoa_r+0x654>)
 8005c6e:	ec51 0b19 	vmov	r0, r1, d9
 8005c72:	f7fa fb0b 	bl	800028c <__adddf3>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d173      	bne.n	8005d6e <_dtoa_r+0x6e6>
 8005c86:	ec53 2b19 	vmov	r2, r3, d9
 8005c8a:	4914      	ldr	r1, [pc, #80]	; (8005cdc <_dtoa_r+0x654>)
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f7fa fafb 	bl	8000288 <__aeabi_dsub>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4640      	mov	r0, r8
 8005c98:	4649      	mov	r1, r9
 8005c9a:	f7fa ff1f 	bl	8000adc <__aeabi_dcmplt>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f43f af2f 	beq.w	8005b02 <_dtoa_r+0x47a>
 8005ca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ca6:	1e6b      	subs	r3, r5, #1
 8005ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	d0f8      	beq.n	8005ca4 <_dtoa_r+0x61c>
 8005cb2:	46bb      	mov	fp, r7
 8005cb4:	e04a      	b.n	8005d4c <_dtoa_r+0x6c4>
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <_dtoa_r+0x648>)
 8005cb8:	f7fa fc9e 	bl	80005f8 <__aeabi_dmul>
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	e7bd      	b.n	8005c3e <_dtoa_r+0x5b6>
 8005cc2:	bf00      	nop
 8005cc4:	080074c8 	.word	0x080074c8
 8005cc8:	080074a0 	.word	0x080074a0
 8005ccc:	3ff00000 	.word	0x3ff00000
 8005cd0:	40240000 	.word	0x40240000
 8005cd4:	401c0000 	.word	0x401c0000
 8005cd8:	40140000 	.word	0x40140000
 8005cdc:	3fe00000 	.word	0x3fe00000
 8005ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ce4:	9d00      	ldr	r5, [sp, #0]
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	4630      	mov	r0, r6
 8005cec:	4639      	mov	r1, r7
 8005cee:	f7fa fdad 	bl	800084c <__aeabi_ddiv>
 8005cf2:	f7fa ff31 	bl	8000b58 <__aeabi_d2iz>
 8005cf6:	9001      	str	r0, [sp, #4]
 8005cf8:	f7fa fc14 	bl	8000524 <__aeabi_i2d>
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	f7fa fc7a 	bl	80005f8 <__aeabi_dmul>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f7fa fabc 	bl	8000288 <__aeabi_dsub>
 8005d10:	9e01      	ldr	r6, [sp, #4]
 8005d12:	9f04      	ldr	r7, [sp, #16]
 8005d14:	3630      	adds	r6, #48	; 0x30
 8005d16:	f805 6b01 	strb.w	r6, [r5], #1
 8005d1a:	9e00      	ldr	r6, [sp, #0]
 8005d1c:	1bae      	subs	r6, r5, r6
 8005d1e:	42b7      	cmp	r7, r6
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	d134      	bne.n	8005d90 <_dtoa_r+0x708>
 8005d26:	f7fa fab1 	bl	800028c <__adddf3>
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	f7fa fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8005d36:	b9c8      	cbnz	r0, 8005d6c <_dtoa_r+0x6e4>
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fa fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d44:	b110      	cbz	r0, 8005d4c <_dtoa_r+0x6c4>
 8005d46:	9b01      	ldr	r3, [sp, #4]
 8005d48:	07db      	lsls	r3, r3, #31
 8005d4a:	d40f      	bmi.n	8005d6c <_dtoa_r+0x6e4>
 8005d4c:	4651      	mov	r1, sl
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 fbcc 	bl	80064ec <_Bfree>
 8005d54:	2300      	movs	r3, #0
 8005d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d58:	702b      	strb	r3, [r5, #0]
 8005d5a:	f10b 0301 	add.w	r3, fp, #1
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f43f ace2 	beq.w	800572c <_dtoa_r+0xa4>
 8005d68:	601d      	str	r5, [r3, #0]
 8005d6a:	e4df      	b.n	800572c <_dtoa_r+0xa4>
 8005d6c:	465f      	mov	r7, fp
 8005d6e:	462b      	mov	r3, r5
 8005d70:	461d      	mov	r5, r3
 8005d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d76:	2a39      	cmp	r2, #57	; 0x39
 8005d78:	d106      	bne.n	8005d88 <_dtoa_r+0x700>
 8005d7a:	9a00      	ldr	r2, [sp, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d1f7      	bne.n	8005d70 <_dtoa_r+0x6e8>
 8005d80:	9900      	ldr	r1, [sp, #0]
 8005d82:	2230      	movs	r2, #48	; 0x30
 8005d84:	3701      	adds	r7, #1
 8005d86:	700a      	strb	r2, [r1, #0]
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e790      	b.n	8005cb2 <_dtoa_r+0x62a>
 8005d90:	4ba3      	ldr	r3, [pc, #652]	; (8006020 <_dtoa_r+0x998>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	f7fa fc30 	bl	80005f8 <__aeabi_dmul>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	f7fa fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d09e      	beq.n	8005ce6 <_dtoa_r+0x65e>
 8005da8:	e7d0      	b.n	8005d4c <_dtoa_r+0x6c4>
 8005daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	f000 80ca 	beq.w	8005f46 <_dtoa_r+0x8be>
 8005db2:	9a07      	ldr	r2, [sp, #28]
 8005db4:	2a01      	cmp	r2, #1
 8005db6:	f300 80ad 	bgt.w	8005f14 <_dtoa_r+0x88c>
 8005dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	f000 80a5 	beq.w	8005f0c <_dtoa_r+0x884>
 8005dc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dc6:	9e08      	ldr	r6, [sp, #32]
 8005dc8:	9d05      	ldr	r5, [sp, #20]
 8005dca:	9a05      	ldr	r2, [sp, #20]
 8005dcc:	441a      	add	r2, r3
 8005dce:	9205      	str	r2, [sp, #20]
 8005dd0:	9a06      	ldr	r2, [sp, #24]
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	441a      	add	r2, r3
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	9206      	str	r2, [sp, #24]
 8005dda:	f000 fc3d 	bl	8006658 <__i2b>
 8005dde:	4607      	mov	r7, r0
 8005de0:	b165      	cbz	r5, 8005dfc <_dtoa_r+0x774>
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dd09      	ble.n	8005dfc <_dtoa_r+0x774>
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	9a05      	ldr	r2, [sp, #20]
 8005dec:	bfa8      	it	ge
 8005dee:	462b      	movge	r3, r5
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	9205      	str	r2, [sp, #20]
 8005df4:	9a06      	ldr	r2, [sp, #24]
 8005df6:	1aed      	subs	r5, r5, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	9306      	str	r3, [sp, #24]
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	b1f3      	cbz	r3, 8005e3e <_dtoa_r+0x7b6>
 8005e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a3 	beq.w	8005f4e <_dtoa_r+0x8c6>
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	dd10      	ble.n	8005e2e <_dtoa_r+0x7a6>
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4632      	mov	r2, r6
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fce1 	bl	80067d8 <__pow5mult>
 8005e16:	4652      	mov	r2, sl
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fc31 	bl	8006684 <__multiply>
 8005e22:	4651      	mov	r1, sl
 8005e24:	4680      	mov	r8, r0
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fb60 	bl	80064ec <_Bfree>
 8005e2c:	46c2      	mov	sl, r8
 8005e2e:	9b08      	ldr	r3, [sp, #32]
 8005e30:	1b9a      	subs	r2, r3, r6
 8005e32:	d004      	beq.n	8005e3e <_dtoa_r+0x7b6>
 8005e34:	4651      	mov	r1, sl
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 fcce 	bl	80067d8 <__pow5mult>
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	2101      	movs	r1, #1
 8005e40:	4620      	mov	r0, r4
 8005e42:	f000 fc09 	bl	8006658 <__i2b>
 8005e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	f340 8081 	ble.w	8005f52 <_dtoa_r+0x8ca>
 8005e50:	461a      	mov	r2, r3
 8005e52:	4601      	mov	r1, r0
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fcbf 	bl	80067d8 <__pow5mult>
 8005e5a:	9b07      	ldr	r3, [sp, #28]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	4606      	mov	r6, r0
 8005e60:	dd7a      	ble.n	8005f58 <_dtoa_r+0x8d0>
 8005e62:	f04f 0800 	mov.w	r8, #0
 8005e66:	6933      	ldr	r3, [r6, #16]
 8005e68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e6c:	6918      	ldr	r0, [r3, #16]
 8005e6e:	f000 fba5 	bl	80065bc <__hi0bits>
 8005e72:	f1c0 0020 	rsb	r0, r0, #32
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	4418      	add	r0, r3
 8005e7a:	f010 001f 	ands.w	r0, r0, #31
 8005e7e:	f000 8094 	beq.w	8005faa <_dtoa_r+0x922>
 8005e82:	f1c0 0320 	rsb	r3, r0, #32
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	f340 8085 	ble.w	8005f96 <_dtoa_r+0x90e>
 8005e8c:	9b05      	ldr	r3, [sp, #20]
 8005e8e:	f1c0 001c 	rsb	r0, r0, #28
 8005e92:	4403      	add	r3, r0
 8005e94:	9305      	str	r3, [sp, #20]
 8005e96:	9b06      	ldr	r3, [sp, #24]
 8005e98:	4403      	add	r3, r0
 8005e9a:	4405      	add	r5, r0
 8005e9c:	9306      	str	r3, [sp, #24]
 8005e9e:	9b05      	ldr	r3, [sp, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dd05      	ble.n	8005eb0 <_dtoa_r+0x828>
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fcef 	bl	800688c <__lshift>
 8005eae:	4682      	mov	sl, r0
 8005eb0:	9b06      	ldr	r3, [sp, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dd05      	ble.n	8005ec2 <_dtoa_r+0x83a>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 fce6 	bl	800688c <__lshift>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d072      	beq.n	8005fae <_dtoa_r+0x926>
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4650      	mov	r0, sl
 8005ecc:	f000 fd4a 	bl	8006964 <__mcmp>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	da6c      	bge.n	8005fae <_dtoa_r+0x926>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4651      	mov	r1, sl
 8005ed8:	220a      	movs	r2, #10
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 fb28 	bl	8006530 <__multadd>
 8005ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ee6:	4682      	mov	sl, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 81b0 	beq.w	800624e <_dtoa_r+0xbc6>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	220a      	movs	r2, #10
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 fb1b 	bl	8006530 <__multadd>
 8005efa:	9b01      	ldr	r3, [sp, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	4607      	mov	r7, r0
 8005f00:	f300 8096 	bgt.w	8006030 <_dtoa_r+0x9a8>
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	dc59      	bgt.n	8005fbe <_dtoa_r+0x936>
 8005f0a:	e091      	b.n	8006030 <_dtoa_r+0x9a8>
 8005f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f12:	e758      	b.n	8005dc6 <_dtoa_r+0x73e>
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	1e5e      	subs	r6, r3, #1
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	42b3      	cmp	r3, r6
 8005f1c:	bfbf      	itttt	lt
 8005f1e:	9b08      	ldrlt	r3, [sp, #32]
 8005f20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f22:	9608      	strlt	r6, [sp, #32]
 8005f24:	1af3      	sublt	r3, r6, r3
 8005f26:	bfb4      	ite	lt
 8005f28:	18d2      	addlt	r2, r2, r3
 8005f2a:	1b9e      	subge	r6, r3, r6
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	bfbc      	itt	lt
 8005f30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f32:	2600      	movlt	r6, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfb7      	itett	lt
 8005f38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f40:	1a9d      	sublt	r5, r3, r2
 8005f42:	2300      	movlt	r3, #0
 8005f44:	e741      	b.n	8005dca <_dtoa_r+0x742>
 8005f46:	9e08      	ldr	r6, [sp, #32]
 8005f48:	9d05      	ldr	r5, [sp, #20]
 8005f4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f4c:	e748      	b.n	8005de0 <_dtoa_r+0x758>
 8005f4e:	9a08      	ldr	r2, [sp, #32]
 8005f50:	e770      	b.n	8005e34 <_dtoa_r+0x7ac>
 8005f52:	9b07      	ldr	r3, [sp, #28]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	dc19      	bgt.n	8005f8c <_dtoa_r+0x904>
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	b9bb      	cbnz	r3, 8005f8c <_dtoa_r+0x904>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f62:	b99b      	cbnz	r3, 8005f8c <_dtoa_r+0x904>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	051b      	lsls	r3, r3, #20
 8005f6e:	b183      	cbz	r3, 8005f92 <_dtoa_r+0x90a>
 8005f70:	9b05      	ldr	r3, [sp, #20]
 8005f72:	3301      	adds	r3, #1
 8005f74:	9305      	str	r3, [sp, #20]
 8005f76:	9b06      	ldr	r3, [sp, #24]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9306      	str	r3, [sp, #24]
 8005f7c:	f04f 0801 	mov.w	r8, #1
 8005f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f47f af6f 	bne.w	8005e66 <_dtoa_r+0x7de>
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e774      	b.n	8005e76 <_dtoa_r+0x7ee>
 8005f8c:	f04f 0800 	mov.w	r8, #0
 8005f90:	e7f6      	b.n	8005f80 <_dtoa_r+0x8f8>
 8005f92:	4698      	mov	r8, r3
 8005f94:	e7f4      	b.n	8005f80 <_dtoa_r+0x8f8>
 8005f96:	d082      	beq.n	8005e9e <_dtoa_r+0x816>
 8005f98:	9a05      	ldr	r2, [sp, #20]
 8005f9a:	331c      	adds	r3, #28
 8005f9c:	441a      	add	r2, r3
 8005f9e:	9205      	str	r2, [sp, #20]
 8005fa0:	9a06      	ldr	r2, [sp, #24]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	441d      	add	r5, r3
 8005fa6:	9206      	str	r2, [sp, #24]
 8005fa8:	e779      	b.n	8005e9e <_dtoa_r+0x816>
 8005faa:	4603      	mov	r3, r0
 8005fac:	e7f4      	b.n	8005f98 <_dtoa_r+0x910>
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dc37      	bgt.n	8006024 <_dtoa_r+0x99c>
 8005fb4:	9b07      	ldr	r3, [sp, #28]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	dd34      	ble.n	8006024 <_dtoa_r+0x99c>
 8005fba:	9b04      	ldr	r3, [sp, #16]
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	b963      	cbnz	r3, 8005fdc <_dtoa_r+0x954>
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	2205      	movs	r2, #5
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 fab2 	bl	8006530 <__multadd>
 8005fcc:	4601      	mov	r1, r0
 8005fce:	4606      	mov	r6, r0
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	f000 fcc7 	bl	8006964 <__mcmp>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	f73f adbb 	bgt.w	8005b52 <_dtoa_r+0x4ca>
 8005fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fde:	9d00      	ldr	r5, [sp, #0]
 8005fe0:	ea6f 0b03 	mvn.w	fp, r3
 8005fe4:	f04f 0800 	mov.w	r8, #0
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fa7e 	bl	80064ec <_Bfree>
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	f43f aeab 	beq.w	8005d4c <_dtoa_r+0x6c4>
 8005ff6:	f1b8 0f00 	cmp.w	r8, #0
 8005ffa:	d005      	beq.n	8006008 <_dtoa_r+0x980>
 8005ffc:	45b8      	cmp	r8, r7
 8005ffe:	d003      	beq.n	8006008 <_dtoa_r+0x980>
 8006000:	4641      	mov	r1, r8
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fa72 	bl	80064ec <_Bfree>
 8006008:	4639      	mov	r1, r7
 800600a:	4620      	mov	r0, r4
 800600c:	f000 fa6e 	bl	80064ec <_Bfree>
 8006010:	e69c      	b.n	8005d4c <_dtoa_r+0x6c4>
 8006012:	2600      	movs	r6, #0
 8006014:	4637      	mov	r7, r6
 8006016:	e7e1      	b.n	8005fdc <_dtoa_r+0x954>
 8006018:	46bb      	mov	fp, r7
 800601a:	4637      	mov	r7, r6
 800601c:	e599      	b.n	8005b52 <_dtoa_r+0x4ca>
 800601e:	bf00      	nop
 8006020:	40240000 	.word	0x40240000
 8006024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80c8 	beq.w	80061bc <_dtoa_r+0xb34>
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	2d00      	cmp	r5, #0
 8006032:	dd05      	ble.n	8006040 <_dtoa_r+0x9b8>
 8006034:	4639      	mov	r1, r7
 8006036:	462a      	mov	r2, r5
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fc27 	bl	800688c <__lshift>
 800603e:	4607      	mov	r7, r0
 8006040:	f1b8 0f00 	cmp.w	r8, #0
 8006044:	d05b      	beq.n	80060fe <_dtoa_r+0xa76>
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4620      	mov	r0, r4
 800604a:	f000 fa0f 	bl	800646c <_Balloc>
 800604e:	4605      	mov	r5, r0
 8006050:	b928      	cbnz	r0, 800605e <_dtoa_r+0x9d6>
 8006052:	4b83      	ldr	r3, [pc, #524]	; (8006260 <_dtoa_r+0xbd8>)
 8006054:	4602      	mov	r2, r0
 8006056:	f240 21ef 	movw	r1, #751	; 0x2ef
 800605a:	f7ff bb2e 	b.w	80056ba <_dtoa_r+0x32>
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	3202      	adds	r2, #2
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	f107 010c 	add.w	r1, r7, #12
 8006068:	300c      	adds	r0, #12
 800606a:	f001 f813 	bl	8007094 <memcpy>
 800606e:	2201      	movs	r2, #1
 8006070:	4629      	mov	r1, r5
 8006072:	4620      	mov	r0, r4
 8006074:	f000 fc0a 	bl	800688c <__lshift>
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006082:	4413      	add	r3, r2
 8006084:	9308      	str	r3, [sp, #32]
 8006086:	9b02      	ldr	r3, [sp, #8]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	46b8      	mov	r8, r7
 800608e:	9306      	str	r3, [sp, #24]
 8006090:	4607      	mov	r7, r0
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	4631      	mov	r1, r6
 8006096:	3b01      	subs	r3, #1
 8006098:	4650      	mov	r0, sl
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	f7ff fa6a 	bl	8005574 <quorem>
 80060a0:	4641      	mov	r1, r8
 80060a2:	9002      	str	r0, [sp, #8]
 80060a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80060a8:	4650      	mov	r0, sl
 80060aa:	f000 fc5b 	bl	8006964 <__mcmp>
 80060ae:	463a      	mov	r2, r7
 80060b0:	9005      	str	r0, [sp, #20]
 80060b2:	4631      	mov	r1, r6
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fc71 	bl	800699c <__mdiff>
 80060ba:	68c2      	ldr	r2, [r0, #12]
 80060bc:	4605      	mov	r5, r0
 80060be:	bb02      	cbnz	r2, 8006102 <_dtoa_r+0xa7a>
 80060c0:	4601      	mov	r1, r0
 80060c2:	4650      	mov	r0, sl
 80060c4:	f000 fc4e 	bl	8006964 <__mcmp>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4629      	mov	r1, r5
 80060cc:	4620      	mov	r0, r4
 80060ce:	9209      	str	r2, [sp, #36]	; 0x24
 80060d0:	f000 fa0c 	bl	80064ec <_Bfree>
 80060d4:	9b07      	ldr	r3, [sp, #28]
 80060d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d8:	9d04      	ldr	r5, [sp, #16]
 80060da:	ea43 0102 	orr.w	r1, r3, r2
 80060de:	9b06      	ldr	r3, [sp, #24]
 80060e0:	4319      	orrs	r1, r3
 80060e2:	d110      	bne.n	8006106 <_dtoa_r+0xa7e>
 80060e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060e8:	d029      	beq.n	800613e <_dtoa_r+0xab6>
 80060ea:	9b05      	ldr	r3, [sp, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd02      	ble.n	80060f6 <_dtoa_r+0xa6e>
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	f883 9000 	strb.w	r9, [r3]
 80060fc:	e774      	b.n	8005fe8 <_dtoa_r+0x960>
 80060fe:	4638      	mov	r0, r7
 8006100:	e7ba      	b.n	8006078 <_dtoa_r+0x9f0>
 8006102:	2201      	movs	r2, #1
 8006104:	e7e1      	b.n	80060ca <_dtoa_r+0xa42>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	db04      	blt.n	8006116 <_dtoa_r+0xa8e>
 800610c:	9907      	ldr	r1, [sp, #28]
 800610e:	430b      	orrs	r3, r1
 8006110:	9906      	ldr	r1, [sp, #24]
 8006112:	430b      	orrs	r3, r1
 8006114:	d120      	bne.n	8006158 <_dtoa_r+0xad0>
 8006116:	2a00      	cmp	r2, #0
 8006118:	dded      	ble.n	80060f6 <_dtoa_r+0xa6e>
 800611a:	4651      	mov	r1, sl
 800611c:	2201      	movs	r2, #1
 800611e:	4620      	mov	r0, r4
 8006120:	f000 fbb4 	bl	800688c <__lshift>
 8006124:	4631      	mov	r1, r6
 8006126:	4682      	mov	sl, r0
 8006128:	f000 fc1c 	bl	8006964 <__mcmp>
 800612c:	2800      	cmp	r0, #0
 800612e:	dc03      	bgt.n	8006138 <_dtoa_r+0xab0>
 8006130:	d1e1      	bne.n	80060f6 <_dtoa_r+0xa6e>
 8006132:	f019 0f01 	tst.w	r9, #1
 8006136:	d0de      	beq.n	80060f6 <_dtoa_r+0xa6e>
 8006138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800613c:	d1d8      	bne.n	80060f0 <_dtoa_r+0xa68>
 800613e:	9a01      	ldr	r2, [sp, #4]
 8006140:	2339      	movs	r3, #57	; 0x39
 8006142:	7013      	strb	r3, [r2, #0]
 8006144:	462b      	mov	r3, r5
 8006146:	461d      	mov	r5, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800614e:	2a39      	cmp	r2, #57	; 0x39
 8006150:	d06c      	beq.n	800622c <_dtoa_r+0xba4>
 8006152:	3201      	adds	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e747      	b.n	8005fe8 <_dtoa_r+0x960>
 8006158:	2a00      	cmp	r2, #0
 800615a:	dd07      	ble.n	800616c <_dtoa_r+0xae4>
 800615c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006160:	d0ed      	beq.n	800613e <_dtoa_r+0xab6>
 8006162:	9a01      	ldr	r2, [sp, #4]
 8006164:	f109 0301 	add.w	r3, r9, #1
 8006168:	7013      	strb	r3, [r2, #0]
 800616a:	e73d      	b.n	8005fe8 <_dtoa_r+0x960>
 800616c:	9b04      	ldr	r3, [sp, #16]
 800616e:	9a08      	ldr	r2, [sp, #32]
 8006170:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006174:	4293      	cmp	r3, r2
 8006176:	d043      	beq.n	8006200 <_dtoa_r+0xb78>
 8006178:	4651      	mov	r1, sl
 800617a:	2300      	movs	r3, #0
 800617c:	220a      	movs	r2, #10
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f9d6 	bl	8006530 <__multadd>
 8006184:	45b8      	cmp	r8, r7
 8006186:	4682      	mov	sl, r0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	f04f 020a 	mov.w	r2, #10
 8006190:	4641      	mov	r1, r8
 8006192:	4620      	mov	r0, r4
 8006194:	d107      	bne.n	80061a6 <_dtoa_r+0xb1e>
 8006196:	f000 f9cb 	bl	8006530 <__multadd>
 800619a:	4680      	mov	r8, r0
 800619c:	4607      	mov	r7, r0
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	3301      	adds	r3, #1
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	e775      	b.n	8006092 <_dtoa_r+0xa0a>
 80061a6:	f000 f9c3 	bl	8006530 <__multadd>
 80061aa:	4639      	mov	r1, r7
 80061ac:	4680      	mov	r8, r0
 80061ae:	2300      	movs	r3, #0
 80061b0:	220a      	movs	r2, #10
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f9bc 	bl	8006530 <__multadd>
 80061b8:	4607      	mov	r7, r0
 80061ba:	e7f0      	b.n	800619e <_dtoa_r+0xb16>
 80061bc:	9b04      	ldr	r3, [sp, #16]
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	9d00      	ldr	r5, [sp, #0]
 80061c2:	4631      	mov	r1, r6
 80061c4:	4650      	mov	r0, sl
 80061c6:	f7ff f9d5 	bl	8005574 <quorem>
 80061ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061ce:	9b00      	ldr	r3, [sp, #0]
 80061d0:	f805 9b01 	strb.w	r9, [r5], #1
 80061d4:	1aea      	subs	r2, r5, r3
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	4293      	cmp	r3, r2
 80061da:	dd07      	ble.n	80061ec <_dtoa_r+0xb64>
 80061dc:	4651      	mov	r1, sl
 80061de:	2300      	movs	r3, #0
 80061e0:	220a      	movs	r2, #10
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 f9a4 	bl	8006530 <__multadd>
 80061e8:	4682      	mov	sl, r0
 80061ea:	e7ea      	b.n	80061c2 <_dtoa_r+0xb3a>
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfc8      	it	gt
 80061f2:	461d      	movgt	r5, r3
 80061f4:	9b00      	ldr	r3, [sp, #0]
 80061f6:	bfd8      	it	le
 80061f8:	2501      	movle	r5, #1
 80061fa:	441d      	add	r5, r3
 80061fc:	f04f 0800 	mov.w	r8, #0
 8006200:	4651      	mov	r1, sl
 8006202:	2201      	movs	r2, #1
 8006204:	4620      	mov	r0, r4
 8006206:	f000 fb41 	bl	800688c <__lshift>
 800620a:	4631      	mov	r1, r6
 800620c:	4682      	mov	sl, r0
 800620e:	f000 fba9 	bl	8006964 <__mcmp>
 8006212:	2800      	cmp	r0, #0
 8006214:	dc96      	bgt.n	8006144 <_dtoa_r+0xabc>
 8006216:	d102      	bne.n	800621e <_dtoa_r+0xb96>
 8006218:	f019 0f01 	tst.w	r9, #1
 800621c:	d192      	bne.n	8006144 <_dtoa_r+0xabc>
 800621e:	462b      	mov	r3, r5
 8006220:	461d      	mov	r5, r3
 8006222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006226:	2a30      	cmp	r2, #48	; 0x30
 8006228:	d0fa      	beq.n	8006220 <_dtoa_r+0xb98>
 800622a:	e6dd      	b.n	8005fe8 <_dtoa_r+0x960>
 800622c:	9a00      	ldr	r2, [sp, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d189      	bne.n	8006146 <_dtoa_r+0xabe>
 8006232:	f10b 0b01 	add.w	fp, fp, #1
 8006236:	2331      	movs	r3, #49	; 0x31
 8006238:	e796      	b.n	8006168 <_dtoa_r+0xae0>
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <_dtoa_r+0xbdc>)
 800623c:	f7ff ba99 	b.w	8005772 <_dtoa_r+0xea>
 8006240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006242:	2b00      	cmp	r3, #0
 8006244:	f47f aa6d 	bne.w	8005722 <_dtoa_r+0x9a>
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_dtoa_r+0xbe0>)
 800624a:	f7ff ba92 	b.w	8005772 <_dtoa_r+0xea>
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	dcb5      	bgt.n	80061c0 <_dtoa_r+0xb38>
 8006254:	9b07      	ldr	r3, [sp, #28]
 8006256:	2b02      	cmp	r3, #2
 8006258:	f73f aeb1 	bgt.w	8005fbe <_dtoa_r+0x936>
 800625c:	e7b0      	b.n	80061c0 <_dtoa_r+0xb38>
 800625e:	bf00      	nop
 8006260:	08007434 	.word	0x08007434
 8006264:	08007394 	.word	0x08007394
 8006268:	080073b8 	.word	0x080073b8

0800626c <_free_r>:
 800626c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626e:	2900      	cmp	r1, #0
 8006270:	d044      	beq.n	80062fc <_free_r+0x90>
 8006272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006276:	9001      	str	r0, [sp, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f1a1 0404 	sub.w	r4, r1, #4
 800627e:	bfb8      	it	lt
 8006280:	18e4      	addlt	r4, r4, r3
 8006282:	f000 f8e7 	bl	8006454 <__malloc_lock>
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <_free_r+0x94>)
 8006288:	9801      	ldr	r0, [sp, #4]
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	b933      	cbnz	r3, 800629c <_free_r+0x30>
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	b003      	add	sp, #12
 8006294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006298:	f000 b8e2 	b.w	8006460 <__malloc_unlock>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x46>
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	1961      	adds	r1, r4, r5
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf01      	itttt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	1949      	addeq	r1, r1, r5
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	e7ed      	b.n	800628e <_free_r+0x22>
 80062b2:	461a      	mov	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b10b      	cbz	r3, 80062bc <_free_r+0x50>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d9fa      	bls.n	80062b2 <_free_r+0x46>
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	1855      	adds	r5, r2, r1
 80062c0:	42a5      	cmp	r5, r4
 80062c2:	d10b      	bne.n	80062dc <_free_r+0x70>
 80062c4:	6824      	ldr	r4, [r4, #0]
 80062c6:	4421      	add	r1, r4
 80062c8:	1854      	adds	r4, r2, r1
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	d1e0      	bne.n	8006292 <_free_r+0x26>
 80062d0:	681c      	ldr	r4, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6053      	str	r3, [r2, #4]
 80062d6:	440c      	add	r4, r1
 80062d8:	6014      	str	r4, [r2, #0]
 80062da:	e7da      	b.n	8006292 <_free_r+0x26>
 80062dc:	d902      	bls.n	80062e4 <_free_r+0x78>
 80062de:	230c      	movs	r3, #12
 80062e0:	6003      	str	r3, [r0, #0]
 80062e2:	e7d6      	b.n	8006292 <_free_r+0x26>
 80062e4:	6825      	ldr	r5, [r4, #0]
 80062e6:	1961      	adds	r1, r4, r5
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf04      	itt	eq
 80062ec:	6819      	ldreq	r1, [r3, #0]
 80062ee:	685b      	ldreq	r3, [r3, #4]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	bf04      	itt	eq
 80062f4:	1949      	addeq	r1, r1, r5
 80062f6:	6021      	streq	r1, [r4, #0]
 80062f8:	6054      	str	r4, [r2, #4]
 80062fa:	e7ca      	b.n	8006292 <_free_r+0x26>
 80062fc:	b003      	add	sp, #12
 80062fe:	bd30      	pop	{r4, r5, pc}
 8006300:	2000076c 	.word	0x2000076c

08006304 <malloc>:
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <malloc+0xc>)
 8006306:	4601      	mov	r1, r0
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f000 b823 	b.w	8006354 <_malloc_r>
 800630e:	bf00      	nop
 8006310:	20000068 	.word	0x20000068

08006314 <sbrk_aligned>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	4e0e      	ldr	r6, [pc, #56]	; (8006350 <sbrk_aligned+0x3c>)
 8006318:	460c      	mov	r4, r1
 800631a:	6831      	ldr	r1, [r6, #0]
 800631c:	4605      	mov	r5, r0
 800631e:	b911      	cbnz	r1, 8006326 <sbrk_aligned+0x12>
 8006320:	f000 fea8 	bl	8007074 <_sbrk_r>
 8006324:	6030      	str	r0, [r6, #0]
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f000 fea3 	bl	8007074 <_sbrk_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d00a      	beq.n	8006348 <sbrk_aligned+0x34>
 8006332:	1cc4      	adds	r4, r0, #3
 8006334:	f024 0403 	bic.w	r4, r4, #3
 8006338:	42a0      	cmp	r0, r4
 800633a:	d007      	beq.n	800634c <sbrk_aligned+0x38>
 800633c:	1a21      	subs	r1, r4, r0
 800633e:	4628      	mov	r0, r5
 8006340:	f000 fe98 	bl	8007074 <_sbrk_r>
 8006344:	3001      	adds	r0, #1
 8006346:	d101      	bne.n	800634c <sbrk_aligned+0x38>
 8006348:	f04f 34ff 	mov.w	r4, #4294967295
 800634c:	4620      	mov	r0, r4
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	20000770 	.word	0x20000770

08006354 <_malloc_r>:
 8006354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006358:	1ccd      	adds	r5, r1, #3
 800635a:	f025 0503 	bic.w	r5, r5, #3
 800635e:	3508      	adds	r5, #8
 8006360:	2d0c      	cmp	r5, #12
 8006362:	bf38      	it	cc
 8006364:	250c      	movcc	r5, #12
 8006366:	2d00      	cmp	r5, #0
 8006368:	4607      	mov	r7, r0
 800636a:	db01      	blt.n	8006370 <_malloc_r+0x1c>
 800636c:	42a9      	cmp	r1, r5
 800636e:	d905      	bls.n	800637c <_malloc_r+0x28>
 8006370:	230c      	movs	r3, #12
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	2600      	movs	r6, #0
 8006376:	4630      	mov	r0, r6
 8006378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006450 <_malloc_r+0xfc>
 8006380:	f000 f868 	bl	8006454 <__malloc_lock>
 8006384:	f8d8 3000 	ldr.w	r3, [r8]
 8006388:	461c      	mov	r4, r3
 800638a:	bb5c      	cbnz	r4, 80063e4 <_malloc_r+0x90>
 800638c:	4629      	mov	r1, r5
 800638e:	4638      	mov	r0, r7
 8006390:	f7ff ffc0 	bl	8006314 <sbrk_aligned>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	4604      	mov	r4, r0
 8006398:	d155      	bne.n	8006446 <_malloc_r+0xf2>
 800639a:	f8d8 4000 	ldr.w	r4, [r8]
 800639e:	4626      	mov	r6, r4
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	d145      	bne.n	8006430 <_malloc_r+0xdc>
 80063a4:	2c00      	cmp	r4, #0
 80063a6:	d048      	beq.n	800643a <_malloc_r+0xe6>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	4631      	mov	r1, r6
 80063ac:	4638      	mov	r0, r7
 80063ae:	eb04 0903 	add.w	r9, r4, r3
 80063b2:	f000 fe5f 	bl	8007074 <_sbrk_r>
 80063b6:	4581      	cmp	r9, r0
 80063b8:	d13f      	bne.n	800643a <_malloc_r+0xe6>
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	1a6d      	subs	r5, r5, r1
 80063be:	4629      	mov	r1, r5
 80063c0:	4638      	mov	r0, r7
 80063c2:	f7ff ffa7 	bl	8006314 <sbrk_aligned>
 80063c6:	3001      	adds	r0, #1
 80063c8:	d037      	beq.n	800643a <_malloc_r+0xe6>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	442b      	add	r3, r5
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	f8d8 3000 	ldr.w	r3, [r8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d038      	beq.n	800644a <_malloc_r+0xf6>
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	42a2      	cmp	r2, r4
 80063dc:	d12b      	bne.n	8006436 <_malloc_r+0xe2>
 80063de:	2200      	movs	r2, #0
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	e00f      	b.n	8006404 <_malloc_r+0xb0>
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	1b52      	subs	r2, r2, r5
 80063e8:	d41f      	bmi.n	800642a <_malloc_r+0xd6>
 80063ea:	2a0b      	cmp	r2, #11
 80063ec:	d917      	bls.n	800641e <_malloc_r+0xca>
 80063ee:	1961      	adds	r1, r4, r5
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	6025      	str	r5, [r4, #0]
 80063f4:	bf18      	it	ne
 80063f6:	6059      	strne	r1, [r3, #4]
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	bf08      	it	eq
 80063fc:	f8c8 1000 	streq.w	r1, [r8]
 8006400:	5162      	str	r2, [r4, r5]
 8006402:	604b      	str	r3, [r1, #4]
 8006404:	4638      	mov	r0, r7
 8006406:	f104 060b 	add.w	r6, r4, #11
 800640a:	f000 f829 	bl	8006460 <__malloc_unlock>
 800640e:	f026 0607 	bic.w	r6, r6, #7
 8006412:	1d23      	adds	r3, r4, #4
 8006414:	1af2      	subs	r2, r6, r3
 8006416:	d0ae      	beq.n	8006376 <_malloc_r+0x22>
 8006418:	1b9b      	subs	r3, r3, r6
 800641a:	50a3      	str	r3, [r4, r2]
 800641c:	e7ab      	b.n	8006376 <_malloc_r+0x22>
 800641e:	42a3      	cmp	r3, r4
 8006420:	6862      	ldr	r2, [r4, #4]
 8006422:	d1dd      	bne.n	80063e0 <_malloc_r+0x8c>
 8006424:	f8c8 2000 	str.w	r2, [r8]
 8006428:	e7ec      	b.n	8006404 <_malloc_r+0xb0>
 800642a:	4623      	mov	r3, r4
 800642c:	6864      	ldr	r4, [r4, #4]
 800642e:	e7ac      	b.n	800638a <_malloc_r+0x36>
 8006430:	4634      	mov	r4, r6
 8006432:	6876      	ldr	r6, [r6, #4]
 8006434:	e7b4      	b.n	80063a0 <_malloc_r+0x4c>
 8006436:	4613      	mov	r3, r2
 8006438:	e7cc      	b.n	80063d4 <_malloc_r+0x80>
 800643a:	230c      	movs	r3, #12
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4638      	mov	r0, r7
 8006440:	f000 f80e 	bl	8006460 <__malloc_unlock>
 8006444:	e797      	b.n	8006376 <_malloc_r+0x22>
 8006446:	6025      	str	r5, [r4, #0]
 8006448:	e7dc      	b.n	8006404 <_malloc_r+0xb0>
 800644a:	605b      	str	r3, [r3, #4]
 800644c:	deff      	udf	#255	; 0xff
 800644e:	bf00      	nop
 8006450:	2000076c 	.word	0x2000076c

08006454 <__malloc_lock>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__malloc_lock+0x8>)
 8006456:	f7ff b88b 	b.w	8005570 <__retarget_lock_acquire_recursive>
 800645a:	bf00      	nop
 800645c:	20000768 	.word	0x20000768

08006460 <__malloc_unlock>:
 8006460:	4801      	ldr	r0, [pc, #4]	; (8006468 <__malloc_unlock+0x8>)
 8006462:	f7ff b886 	b.w	8005572 <__retarget_lock_release_recursive>
 8006466:	bf00      	nop
 8006468:	20000768 	.word	0x20000768

0800646c <_Balloc>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	69c6      	ldr	r6, [r0, #28]
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
 8006474:	b976      	cbnz	r6, 8006494 <_Balloc+0x28>
 8006476:	2010      	movs	r0, #16
 8006478:	f7ff ff44 	bl	8006304 <malloc>
 800647c:	4602      	mov	r2, r0
 800647e:	61e0      	str	r0, [r4, #28]
 8006480:	b920      	cbnz	r0, 800648c <_Balloc+0x20>
 8006482:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <_Balloc+0x78>)
 8006484:	4818      	ldr	r0, [pc, #96]	; (80064e8 <_Balloc+0x7c>)
 8006486:	216b      	movs	r1, #107	; 0x6b
 8006488:	f000 fe12 	bl	80070b0 <__assert_func>
 800648c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006490:	6006      	str	r6, [r0, #0]
 8006492:	60c6      	str	r6, [r0, #12]
 8006494:	69e6      	ldr	r6, [r4, #28]
 8006496:	68f3      	ldr	r3, [r6, #12]
 8006498:	b183      	cbz	r3, 80064bc <_Balloc+0x50>
 800649a:	69e3      	ldr	r3, [r4, #28]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064a2:	b9b8      	cbnz	r0, 80064d4 <_Balloc+0x68>
 80064a4:	2101      	movs	r1, #1
 80064a6:	fa01 f605 	lsl.w	r6, r1, r5
 80064aa:	1d72      	adds	r2, r6, #5
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fe1c 	bl	80070ec <_calloc_r>
 80064b4:	b160      	cbz	r0, 80064d0 <_Balloc+0x64>
 80064b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064ba:	e00e      	b.n	80064da <_Balloc+0x6e>
 80064bc:	2221      	movs	r2, #33	; 0x21
 80064be:	2104      	movs	r1, #4
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fe13 	bl	80070ec <_calloc_r>
 80064c6:	69e3      	ldr	r3, [r4, #28]
 80064c8:	60f0      	str	r0, [r6, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e4      	bne.n	800649a <_Balloc+0x2e>
 80064d0:	2000      	movs	r0, #0
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	6802      	ldr	r2, [r0, #0]
 80064d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064da:	2300      	movs	r3, #0
 80064dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e0:	e7f7      	b.n	80064d2 <_Balloc+0x66>
 80064e2:	bf00      	nop
 80064e4:	080073c5 	.word	0x080073c5
 80064e8:	08007445 	.word	0x08007445

080064ec <_Bfree>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	69c6      	ldr	r6, [r0, #28]
 80064f0:	4605      	mov	r5, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	b976      	cbnz	r6, 8006514 <_Bfree+0x28>
 80064f6:	2010      	movs	r0, #16
 80064f8:	f7ff ff04 	bl	8006304 <malloc>
 80064fc:	4602      	mov	r2, r0
 80064fe:	61e8      	str	r0, [r5, #28]
 8006500:	b920      	cbnz	r0, 800650c <_Bfree+0x20>
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <_Bfree+0x3c>)
 8006504:	4809      	ldr	r0, [pc, #36]	; (800652c <_Bfree+0x40>)
 8006506:	218f      	movs	r1, #143	; 0x8f
 8006508:	f000 fdd2 	bl	80070b0 <__assert_func>
 800650c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006510:	6006      	str	r6, [r0, #0]
 8006512:	60c6      	str	r6, [r0, #12]
 8006514:	b13c      	cbz	r4, 8006526 <_Bfree+0x3a>
 8006516:	69eb      	ldr	r3, [r5, #28]
 8006518:	6862      	ldr	r2, [r4, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006520:	6021      	str	r1, [r4, #0]
 8006522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	080073c5 	.word	0x080073c5
 800652c:	08007445 	.word	0x08007445

08006530 <__multadd>:
 8006530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006534:	690d      	ldr	r5, [r1, #16]
 8006536:	4607      	mov	r7, r0
 8006538:	460c      	mov	r4, r1
 800653a:	461e      	mov	r6, r3
 800653c:	f101 0c14 	add.w	ip, r1, #20
 8006540:	2000      	movs	r0, #0
 8006542:	f8dc 3000 	ldr.w	r3, [ip]
 8006546:	b299      	uxth	r1, r3
 8006548:	fb02 6101 	mla	r1, r2, r1, r6
 800654c:	0c1e      	lsrs	r6, r3, #16
 800654e:	0c0b      	lsrs	r3, r1, #16
 8006550:	fb02 3306 	mla	r3, r2, r6, r3
 8006554:	b289      	uxth	r1, r1
 8006556:	3001      	adds	r0, #1
 8006558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800655c:	4285      	cmp	r5, r0
 800655e:	f84c 1b04 	str.w	r1, [ip], #4
 8006562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006566:	dcec      	bgt.n	8006542 <__multadd+0x12>
 8006568:	b30e      	cbz	r6, 80065ae <__multadd+0x7e>
 800656a:	68a3      	ldr	r3, [r4, #8]
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc19      	bgt.n	80065a4 <__multadd+0x74>
 8006570:	6861      	ldr	r1, [r4, #4]
 8006572:	4638      	mov	r0, r7
 8006574:	3101      	adds	r1, #1
 8006576:	f7ff ff79 	bl	800646c <_Balloc>
 800657a:	4680      	mov	r8, r0
 800657c:	b928      	cbnz	r0, 800658a <__multadd+0x5a>
 800657e:	4602      	mov	r2, r0
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <__multadd+0x84>)
 8006582:	480d      	ldr	r0, [pc, #52]	; (80065b8 <__multadd+0x88>)
 8006584:	21ba      	movs	r1, #186	; 0xba
 8006586:	f000 fd93 	bl	80070b0 <__assert_func>
 800658a:	6922      	ldr	r2, [r4, #16]
 800658c:	3202      	adds	r2, #2
 800658e:	f104 010c 	add.w	r1, r4, #12
 8006592:	0092      	lsls	r2, r2, #2
 8006594:	300c      	adds	r0, #12
 8006596:	f000 fd7d 	bl	8007094 <memcpy>
 800659a:	4621      	mov	r1, r4
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff ffa5 	bl	80064ec <_Bfree>
 80065a2:	4644      	mov	r4, r8
 80065a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065a8:	3501      	adds	r5, #1
 80065aa:	615e      	str	r6, [r3, #20]
 80065ac:	6125      	str	r5, [r4, #16]
 80065ae:	4620      	mov	r0, r4
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	08007434 	.word	0x08007434
 80065b8:	08007445 	.word	0x08007445

080065bc <__hi0bits>:
 80065bc:	0c03      	lsrs	r3, r0, #16
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	b9d3      	cbnz	r3, 80065f8 <__hi0bits+0x3c>
 80065c2:	0400      	lsls	r0, r0, #16
 80065c4:	2310      	movs	r3, #16
 80065c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065ca:	bf04      	itt	eq
 80065cc:	0200      	lsleq	r0, r0, #8
 80065ce:	3308      	addeq	r3, #8
 80065d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065d4:	bf04      	itt	eq
 80065d6:	0100      	lsleq	r0, r0, #4
 80065d8:	3304      	addeq	r3, #4
 80065da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065de:	bf04      	itt	eq
 80065e0:	0080      	lsleq	r0, r0, #2
 80065e2:	3302      	addeq	r3, #2
 80065e4:	2800      	cmp	r0, #0
 80065e6:	db05      	blt.n	80065f4 <__hi0bits+0x38>
 80065e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065ec:	f103 0301 	add.w	r3, r3, #1
 80065f0:	bf08      	it	eq
 80065f2:	2320      	moveq	r3, #32
 80065f4:	4618      	mov	r0, r3
 80065f6:	4770      	bx	lr
 80065f8:	2300      	movs	r3, #0
 80065fa:	e7e4      	b.n	80065c6 <__hi0bits+0xa>

080065fc <__lo0bits>:
 80065fc:	6803      	ldr	r3, [r0, #0]
 80065fe:	f013 0207 	ands.w	r2, r3, #7
 8006602:	d00c      	beq.n	800661e <__lo0bits+0x22>
 8006604:	07d9      	lsls	r1, r3, #31
 8006606:	d422      	bmi.n	800664e <__lo0bits+0x52>
 8006608:	079a      	lsls	r2, r3, #30
 800660a:	bf49      	itett	mi
 800660c:	085b      	lsrmi	r3, r3, #1
 800660e:	089b      	lsrpl	r3, r3, #2
 8006610:	6003      	strmi	r3, [r0, #0]
 8006612:	2201      	movmi	r2, #1
 8006614:	bf5c      	itt	pl
 8006616:	6003      	strpl	r3, [r0, #0]
 8006618:	2202      	movpl	r2, #2
 800661a:	4610      	mov	r0, r2
 800661c:	4770      	bx	lr
 800661e:	b299      	uxth	r1, r3
 8006620:	b909      	cbnz	r1, 8006626 <__lo0bits+0x2a>
 8006622:	0c1b      	lsrs	r3, r3, #16
 8006624:	2210      	movs	r2, #16
 8006626:	b2d9      	uxtb	r1, r3
 8006628:	b909      	cbnz	r1, 800662e <__lo0bits+0x32>
 800662a:	3208      	adds	r2, #8
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	0719      	lsls	r1, r3, #28
 8006630:	bf04      	itt	eq
 8006632:	091b      	lsreq	r3, r3, #4
 8006634:	3204      	addeq	r2, #4
 8006636:	0799      	lsls	r1, r3, #30
 8006638:	bf04      	itt	eq
 800663a:	089b      	lsreq	r3, r3, #2
 800663c:	3202      	addeq	r2, #2
 800663e:	07d9      	lsls	r1, r3, #31
 8006640:	d403      	bmi.n	800664a <__lo0bits+0x4e>
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	f102 0201 	add.w	r2, r2, #1
 8006648:	d003      	beq.n	8006652 <__lo0bits+0x56>
 800664a:	6003      	str	r3, [r0, #0]
 800664c:	e7e5      	b.n	800661a <__lo0bits+0x1e>
 800664e:	2200      	movs	r2, #0
 8006650:	e7e3      	b.n	800661a <__lo0bits+0x1e>
 8006652:	2220      	movs	r2, #32
 8006654:	e7e1      	b.n	800661a <__lo0bits+0x1e>
	...

08006658 <__i2b>:
 8006658:	b510      	push	{r4, lr}
 800665a:	460c      	mov	r4, r1
 800665c:	2101      	movs	r1, #1
 800665e:	f7ff ff05 	bl	800646c <_Balloc>
 8006662:	4602      	mov	r2, r0
 8006664:	b928      	cbnz	r0, 8006672 <__i2b+0x1a>
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <__i2b+0x24>)
 8006668:	4805      	ldr	r0, [pc, #20]	; (8006680 <__i2b+0x28>)
 800666a:	f240 1145 	movw	r1, #325	; 0x145
 800666e:	f000 fd1f 	bl	80070b0 <__assert_func>
 8006672:	2301      	movs	r3, #1
 8006674:	6144      	str	r4, [r0, #20]
 8006676:	6103      	str	r3, [r0, #16]
 8006678:	bd10      	pop	{r4, pc}
 800667a:	bf00      	nop
 800667c:	08007434 	.word	0x08007434
 8006680:	08007445 	.word	0x08007445

08006684 <__multiply>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4691      	mov	r9, r2
 800668a:	690a      	ldr	r2, [r1, #16]
 800668c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	bfb8      	it	lt
 8006694:	460b      	movlt	r3, r1
 8006696:	460c      	mov	r4, r1
 8006698:	bfbc      	itt	lt
 800669a:	464c      	movlt	r4, r9
 800669c:	4699      	movlt	r9, r3
 800669e:	6927      	ldr	r7, [r4, #16]
 80066a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	6861      	ldr	r1, [r4, #4]
 80066a8:	eb07 060a 	add.w	r6, r7, sl
 80066ac:	42b3      	cmp	r3, r6
 80066ae:	b085      	sub	sp, #20
 80066b0:	bfb8      	it	lt
 80066b2:	3101      	addlt	r1, #1
 80066b4:	f7ff feda 	bl	800646c <_Balloc>
 80066b8:	b930      	cbnz	r0, 80066c8 <__multiply+0x44>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b44      	ldr	r3, [pc, #272]	; (80067d0 <__multiply+0x14c>)
 80066be:	4845      	ldr	r0, [pc, #276]	; (80067d4 <__multiply+0x150>)
 80066c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066c4:	f000 fcf4 	bl	80070b0 <__assert_func>
 80066c8:	f100 0514 	add.w	r5, r0, #20
 80066cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066d0:	462b      	mov	r3, r5
 80066d2:	2200      	movs	r2, #0
 80066d4:	4543      	cmp	r3, r8
 80066d6:	d321      	bcc.n	800671c <__multiply+0x98>
 80066d8:	f104 0314 	add.w	r3, r4, #20
 80066dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066e0:	f109 0314 	add.w	r3, r9, #20
 80066e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066e8:	9202      	str	r2, [sp, #8]
 80066ea:	1b3a      	subs	r2, r7, r4
 80066ec:	3a15      	subs	r2, #21
 80066ee:	f022 0203 	bic.w	r2, r2, #3
 80066f2:	3204      	adds	r2, #4
 80066f4:	f104 0115 	add.w	r1, r4, #21
 80066f8:	428f      	cmp	r7, r1
 80066fa:	bf38      	it	cc
 80066fc:	2204      	movcc	r2, #4
 80066fe:	9201      	str	r2, [sp, #4]
 8006700:	9a02      	ldr	r2, [sp, #8]
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	429a      	cmp	r2, r3
 8006706:	d80c      	bhi.n	8006722 <__multiply+0x9e>
 8006708:	2e00      	cmp	r6, #0
 800670a:	dd03      	ble.n	8006714 <__multiply+0x90>
 800670c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006710:	2b00      	cmp	r3, #0
 8006712:	d05b      	beq.n	80067cc <__multiply+0x148>
 8006714:	6106      	str	r6, [r0, #16]
 8006716:	b005      	add	sp, #20
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	f843 2b04 	str.w	r2, [r3], #4
 8006720:	e7d8      	b.n	80066d4 <__multiply+0x50>
 8006722:	f8b3 a000 	ldrh.w	sl, [r3]
 8006726:	f1ba 0f00 	cmp.w	sl, #0
 800672a:	d024      	beq.n	8006776 <__multiply+0xf2>
 800672c:	f104 0e14 	add.w	lr, r4, #20
 8006730:	46a9      	mov	r9, r5
 8006732:	f04f 0c00 	mov.w	ip, #0
 8006736:	f85e 2b04 	ldr.w	r2, [lr], #4
 800673a:	f8d9 1000 	ldr.w	r1, [r9]
 800673e:	fa1f fb82 	uxth.w	fp, r2
 8006742:	b289      	uxth	r1, r1
 8006744:	fb0a 110b 	mla	r1, sl, fp, r1
 8006748:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800674c:	f8d9 2000 	ldr.w	r2, [r9]
 8006750:	4461      	add	r1, ip
 8006752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006756:	fb0a c20b 	mla	r2, sl, fp, ip
 800675a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800675e:	b289      	uxth	r1, r1
 8006760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006764:	4577      	cmp	r7, lr
 8006766:	f849 1b04 	str.w	r1, [r9], #4
 800676a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800676e:	d8e2      	bhi.n	8006736 <__multiply+0xb2>
 8006770:	9a01      	ldr	r2, [sp, #4]
 8006772:	f845 c002 	str.w	ip, [r5, r2]
 8006776:	9a03      	ldr	r2, [sp, #12]
 8006778:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800677c:	3304      	adds	r3, #4
 800677e:	f1b9 0f00 	cmp.w	r9, #0
 8006782:	d021      	beq.n	80067c8 <__multiply+0x144>
 8006784:	6829      	ldr	r1, [r5, #0]
 8006786:	f104 0c14 	add.w	ip, r4, #20
 800678a:	46ae      	mov	lr, r5
 800678c:	f04f 0a00 	mov.w	sl, #0
 8006790:	f8bc b000 	ldrh.w	fp, [ip]
 8006794:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006798:	fb09 220b 	mla	r2, r9, fp, r2
 800679c:	4452      	add	r2, sl
 800679e:	b289      	uxth	r1, r1
 80067a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067a4:	f84e 1b04 	str.w	r1, [lr], #4
 80067a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067b0:	f8be 1000 	ldrh.w	r1, [lr]
 80067b4:	fb09 110a 	mla	r1, r9, sl, r1
 80067b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067bc:	4567      	cmp	r7, ip
 80067be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067c2:	d8e5      	bhi.n	8006790 <__multiply+0x10c>
 80067c4:	9a01      	ldr	r2, [sp, #4]
 80067c6:	50a9      	str	r1, [r5, r2]
 80067c8:	3504      	adds	r5, #4
 80067ca:	e799      	b.n	8006700 <__multiply+0x7c>
 80067cc:	3e01      	subs	r6, #1
 80067ce:	e79b      	b.n	8006708 <__multiply+0x84>
 80067d0:	08007434 	.word	0x08007434
 80067d4:	08007445 	.word	0x08007445

080067d8 <__pow5mult>:
 80067d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067dc:	4615      	mov	r5, r2
 80067de:	f012 0203 	ands.w	r2, r2, #3
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	d007      	beq.n	80067f8 <__pow5mult+0x20>
 80067e8:	4c25      	ldr	r4, [pc, #148]	; (8006880 <__pow5mult+0xa8>)
 80067ea:	3a01      	subs	r2, #1
 80067ec:	2300      	movs	r3, #0
 80067ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067f2:	f7ff fe9d 	bl	8006530 <__multadd>
 80067f6:	4607      	mov	r7, r0
 80067f8:	10ad      	asrs	r5, r5, #2
 80067fa:	d03d      	beq.n	8006878 <__pow5mult+0xa0>
 80067fc:	69f4      	ldr	r4, [r6, #28]
 80067fe:	b97c      	cbnz	r4, 8006820 <__pow5mult+0x48>
 8006800:	2010      	movs	r0, #16
 8006802:	f7ff fd7f 	bl	8006304 <malloc>
 8006806:	4602      	mov	r2, r0
 8006808:	61f0      	str	r0, [r6, #28]
 800680a:	b928      	cbnz	r0, 8006818 <__pow5mult+0x40>
 800680c:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <__pow5mult+0xac>)
 800680e:	481e      	ldr	r0, [pc, #120]	; (8006888 <__pow5mult+0xb0>)
 8006810:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006814:	f000 fc4c 	bl	80070b0 <__assert_func>
 8006818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800681c:	6004      	str	r4, [r0, #0]
 800681e:	60c4      	str	r4, [r0, #12]
 8006820:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006828:	b94c      	cbnz	r4, 800683e <__pow5mult+0x66>
 800682a:	f240 2171 	movw	r1, #625	; 0x271
 800682e:	4630      	mov	r0, r6
 8006830:	f7ff ff12 	bl	8006658 <__i2b>
 8006834:	2300      	movs	r3, #0
 8006836:	f8c8 0008 	str.w	r0, [r8, #8]
 800683a:	4604      	mov	r4, r0
 800683c:	6003      	str	r3, [r0, #0]
 800683e:	f04f 0900 	mov.w	r9, #0
 8006842:	07eb      	lsls	r3, r5, #31
 8006844:	d50a      	bpl.n	800685c <__pow5mult+0x84>
 8006846:	4639      	mov	r1, r7
 8006848:	4622      	mov	r2, r4
 800684a:	4630      	mov	r0, r6
 800684c:	f7ff ff1a 	bl	8006684 <__multiply>
 8006850:	4639      	mov	r1, r7
 8006852:	4680      	mov	r8, r0
 8006854:	4630      	mov	r0, r6
 8006856:	f7ff fe49 	bl	80064ec <_Bfree>
 800685a:	4647      	mov	r7, r8
 800685c:	106d      	asrs	r5, r5, #1
 800685e:	d00b      	beq.n	8006878 <__pow5mult+0xa0>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	b938      	cbnz	r0, 8006874 <__pow5mult+0x9c>
 8006864:	4622      	mov	r2, r4
 8006866:	4621      	mov	r1, r4
 8006868:	4630      	mov	r0, r6
 800686a:	f7ff ff0b 	bl	8006684 <__multiply>
 800686e:	6020      	str	r0, [r4, #0]
 8006870:	f8c0 9000 	str.w	r9, [r0]
 8006874:	4604      	mov	r4, r0
 8006876:	e7e4      	b.n	8006842 <__pow5mult+0x6a>
 8006878:	4638      	mov	r0, r7
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	bf00      	nop
 8006880:	08007590 	.word	0x08007590
 8006884:	080073c5 	.word	0x080073c5
 8006888:	08007445 	.word	0x08007445

0800688c <__lshift>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	460c      	mov	r4, r1
 8006892:	6849      	ldr	r1, [r1, #4]
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	4607      	mov	r7, r0
 800689e:	4691      	mov	r9, r2
 80068a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068a4:	f108 0601 	add.w	r6, r8, #1
 80068a8:	42b3      	cmp	r3, r6
 80068aa:	db0b      	blt.n	80068c4 <__lshift+0x38>
 80068ac:	4638      	mov	r0, r7
 80068ae:	f7ff fddd 	bl	800646c <_Balloc>
 80068b2:	4605      	mov	r5, r0
 80068b4:	b948      	cbnz	r0, 80068ca <__lshift+0x3e>
 80068b6:	4602      	mov	r2, r0
 80068b8:	4b28      	ldr	r3, [pc, #160]	; (800695c <__lshift+0xd0>)
 80068ba:	4829      	ldr	r0, [pc, #164]	; (8006960 <__lshift+0xd4>)
 80068bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068c0:	f000 fbf6 	bl	80070b0 <__assert_func>
 80068c4:	3101      	adds	r1, #1
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	e7ee      	b.n	80068a8 <__lshift+0x1c>
 80068ca:	2300      	movs	r3, #0
 80068cc:	f100 0114 	add.w	r1, r0, #20
 80068d0:	f100 0210 	add.w	r2, r0, #16
 80068d4:	4618      	mov	r0, r3
 80068d6:	4553      	cmp	r3, sl
 80068d8:	db33      	blt.n	8006942 <__lshift+0xb6>
 80068da:	6920      	ldr	r0, [r4, #16]
 80068dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068e0:	f104 0314 	add.w	r3, r4, #20
 80068e4:	f019 091f 	ands.w	r9, r9, #31
 80068e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068f0:	d02b      	beq.n	800694a <__lshift+0xbe>
 80068f2:	f1c9 0e20 	rsb	lr, r9, #32
 80068f6:	468a      	mov	sl, r1
 80068f8:	2200      	movs	r2, #0
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006900:	4310      	orrs	r0, r2
 8006902:	f84a 0b04 	str.w	r0, [sl], #4
 8006906:	f853 2b04 	ldr.w	r2, [r3], #4
 800690a:	459c      	cmp	ip, r3
 800690c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006910:	d8f3      	bhi.n	80068fa <__lshift+0x6e>
 8006912:	ebac 0304 	sub.w	r3, ip, r4
 8006916:	3b15      	subs	r3, #21
 8006918:	f023 0303 	bic.w	r3, r3, #3
 800691c:	3304      	adds	r3, #4
 800691e:	f104 0015 	add.w	r0, r4, #21
 8006922:	4584      	cmp	ip, r0
 8006924:	bf38      	it	cc
 8006926:	2304      	movcc	r3, #4
 8006928:	50ca      	str	r2, [r1, r3]
 800692a:	b10a      	cbz	r2, 8006930 <__lshift+0xa4>
 800692c:	f108 0602 	add.w	r6, r8, #2
 8006930:	3e01      	subs	r6, #1
 8006932:	4638      	mov	r0, r7
 8006934:	612e      	str	r6, [r5, #16]
 8006936:	4621      	mov	r1, r4
 8006938:	f7ff fdd8 	bl	80064ec <_Bfree>
 800693c:	4628      	mov	r0, r5
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	f842 0f04 	str.w	r0, [r2, #4]!
 8006946:	3301      	adds	r3, #1
 8006948:	e7c5      	b.n	80068d6 <__lshift+0x4a>
 800694a:	3904      	subs	r1, #4
 800694c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006950:	f841 2f04 	str.w	r2, [r1, #4]!
 8006954:	459c      	cmp	ip, r3
 8006956:	d8f9      	bhi.n	800694c <__lshift+0xc0>
 8006958:	e7ea      	b.n	8006930 <__lshift+0xa4>
 800695a:	bf00      	nop
 800695c:	08007434 	.word	0x08007434
 8006960:	08007445 	.word	0x08007445

08006964 <__mcmp>:
 8006964:	b530      	push	{r4, r5, lr}
 8006966:	6902      	ldr	r2, [r0, #16]
 8006968:	690c      	ldr	r4, [r1, #16]
 800696a:	1b12      	subs	r2, r2, r4
 800696c:	d10e      	bne.n	800698c <__mcmp+0x28>
 800696e:	f100 0314 	add.w	r3, r0, #20
 8006972:	3114      	adds	r1, #20
 8006974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006978:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800697c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006980:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006984:	42a5      	cmp	r5, r4
 8006986:	d003      	beq.n	8006990 <__mcmp+0x2c>
 8006988:	d305      	bcc.n	8006996 <__mcmp+0x32>
 800698a:	2201      	movs	r2, #1
 800698c:	4610      	mov	r0, r2
 800698e:	bd30      	pop	{r4, r5, pc}
 8006990:	4283      	cmp	r3, r0
 8006992:	d3f3      	bcc.n	800697c <__mcmp+0x18>
 8006994:	e7fa      	b.n	800698c <__mcmp+0x28>
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	e7f7      	b.n	800698c <__mcmp+0x28>

0800699c <__mdiff>:
 800699c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	460c      	mov	r4, r1
 80069a2:	4606      	mov	r6, r0
 80069a4:	4611      	mov	r1, r2
 80069a6:	4620      	mov	r0, r4
 80069a8:	4690      	mov	r8, r2
 80069aa:	f7ff ffdb 	bl	8006964 <__mcmp>
 80069ae:	1e05      	subs	r5, r0, #0
 80069b0:	d110      	bne.n	80069d4 <__mdiff+0x38>
 80069b2:	4629      	mov	r1, r5
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff fd59 	bl	800646c <_Balloc>
 80069ba:	b930      	cbnz	r0, 80069ca <__mdiff+0x2e>
 80069bc:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <__mdiff+0x10c>)
 80069be:	4602      	mov	r2, r0
 80069c0:	f240 2137 	movw	r1, #567	; 0x237
 80069c4:	4839      	ldr	r0, [pc, #228]	; (8006aac <__mdiff+0x110>)
 80069c6:	f000 fb73 	bl	80070b0 <__assert_func>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	bfa4      	itt	ge
 80069d6:	4643      	movge	r3, r8
 80069d8:	46a0      	movge	r8, r4
 80069da:	4630      	mov	r0, r6
 80069dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069e0:	bfa6      	itte	ge
 80069e2:	461c      	movge	r4, r3
 80069e4:	2500      	movge	r5, #0
 80069e6:	2501      	movlt	r5, #1
 80069e8:	f7ff fd40 	bl	800646c <_Balloc>
 80069ec:	b920      	cbnz	r0, 80069f8 <__mdiff+0x5c>
 80069ee:	4b2e      	ldr	r3, [pc, #184]	; (8006aa8 <__mdiff+0x10c>)
 80069f0:	4602      	mov	r2, r0
 80069f2:	f240 2145 	movw	r1, #581	; 0x245
 80069f6:	e7e5      	b.n	80069c4 <__mdiff+0x28>
 80069f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069fc:	6926      	ldr	r6, [r4, #16]
 80069fe:	60c5      	str	r5, [r0, #12]
 8006a00:	f104 0914 	add.w	r9, r4, #20
 8006a04:	f108 0514 	add.w	r5, r8, #20
 8006a08:	f100 0e14 	add.w	lr, r0, #20
 8006a0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a14:	f108 0210 	add.w	r2, r8, #16
 8006a18:	46f2      	mov	sl, lr
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a24:	fa11 f88b 	uxtah	r8, r1, fp
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	0c1b      	lsrs	r3, r3, #16
 8006a2c:	eba8 0801 	sub.w	r8, r8, r1
 8006a30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a38:	fa1f f888 	uxth.w	r8, r8
 8006a3c:	1419      	asrs	r1, r3, #16
 8006a3e:	454e      	cmp	r6, r9
 8006a40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a44:	f84a 3b04 	str.w	r3, [sl], #4
 8006a48:	d8e8      	bhi.n	8006a1c <__mdiff+0x80>
 8006a4a:	1b33      	subs	r3, r6, r4
 8006a4c:	3b15      	subs	r3, #21
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	3304      	adds	r3, #4
 8006a54:	3415      	adds	r4, #21
 8006a56:	42a6      	cmp	r6, r4
 8006a58:	bf38      	it	cc
 8006a5a:	2304      	movcc	r3, #4
 8006a5c:	441d      	add	r5, r3
 8006a5e:	4473      	add	r3, lr
 8006a60:	469e      	mov	lr, r3
 8006a62:	462e      	mov	r6, r5
 8006a64:	4566      	cmp	r6, ip
 8006a66:	d30e      	bcc.n	8006a86 <__mdiff+0xea>
 8006a68:	f10c 0203 	add.w	r2, ip, #3
 8006a6c:	1b52      	subs	r2, r2, r5
 8006a6e:	f022 0203 	bic.w	r2, r2, #3
 8006a72:	3d03      	subs	r5, #3
 8006a74:	45ac      	cmp	ip, r5
 8006a76:	bf38      	it	cc
 8006a78:	2200      	movcc	r2, #0
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a80:	b17a      	cbz	r2, 8006aa2 <__mdiff+0x106>
 8006a82:	6107      	str	r7, [r0, #16]
 8006a84:	e7a4      	b.n	80069d0 <__mdiff+0x34>
 8006a86:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a8a:	fa11 f288 	uxtah	r2, r1, r8
 8006a8e:	1414      	asrs	r4, r2, #16
 8006a90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a94:	b292      	uxth	r2, r2
 8006a96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a9a:	f84e 2b04 	str.w	r2, [lr], #4
 8006a9e:	1421      	asrs	r1, r4, #16
 8006aa0:	e7e0      	b.n	8006a64 <__mdiff+0xc8>
 8006aa2:	3f01      	subs	r7, #1
 8006aa4:	e7ea      	b.n	8006a7c <__mdiff+0xe0>
 8006aa6:	bf00      	nop
 8006aa8:	08007434 	.word	0x08007434
 8006aac:	08007445 	.word	0x08007445

08006ab0 <__d2b>:
 8006ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	ec59 8b10 	vmov	r8, r9, d0
 8006abc:	4616      	mov	r6, r2
 8006abe:	f7ff fcd5 	bl	800646c <_Balloc>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	b930      	cbnz	r0, 8006ad4 <__d2b+0x24>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <__d2b+0xac>)
 8006aca:	4825      	ldr	r0, [pc, #148]	; (8006b60 <__d2b+0xb0>)
 8006acc:	f240 310f 	movw	r1, #783	; 0x30f
 8006ad0:	f000 faee 	bl	80070b0 <__assert_func>
 8006ad4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006adc:	bb2d      	cbnz	r5, 8006b2a <__d2b+0x7a>
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ae4:	d026      	beq.n	8006b34 <__d2b+0x84>
 8006ae6:	4668      	mov	r0, sp
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	f7ff fd87 	bl	80065fc <__lo0bits>
 8006aee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006af2:	b1e8      	cbz	r0, 8006b30 <__d2b+0x80>
 8006af4:	f1c0 0320 	rsb	r3, r0, #32
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	430b      	orrs	r3, r1
 8006afe:	40c2      	lsrs	r2, r0
 8006b00:	6163      	str	r3, [r4, #20]
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	61a3      	str	r3, [r4, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf14      	ite	ne
 8006b0c:	2202      	movne	r2, #2
 8006b0e:	2201      	moveq	r2, #1
 8006b10:	6122      	str	r2, [r4, #16]
 8006b12:	b1bd      	cbz	r5, 8006b44 <__d2b+0x94>
 8006b14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b18:	4405      	add	r5, r0
 8006b1a:	603d      	str	r5, [r7, #0]
 8006b1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b20:	6030      	str	r0, [r6, #0]
 8006b22:	4620      	mov	r0, r4
 8006b24:	b003      	add	sp, #12
 8006b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b2e:	e7d6      	b.n	8006ade <__d2b+0x2e>
 8006b30:	6161      	str	r1, [r4, #20]
 8006b32:	e7e7      	b.n	8006b04 <__d2b+0x54>
 8006b34:	a801      	add	r0, sp, #4
 8006b36:	f7ff fd61 	bl	80065fc <__lo0bits>
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	6163      	str	r3, [r4, #20]
 8006b3e:	3020      	adds	r0, #32
 8006b40:	2201      	movs	r2, #1
 8006b42:	e7e5      	b.n	8006b10 <__d2b+0x60>
 8006b44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b4c:	6038      	str	r0, [r7, #0]
 8006b4e:	6918      	ldr	r0, [r3, #16]
 8006b50:	f7ff fd34 	bl	80065bc <__hi0bits>
 8006b54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b58:	e7e2      	b.n	8006b20 <__d2b+0x70>
 8006b5a:	bf00      	nop
 8006b5c:	08007434 	.word	0x08007434
 8006b60:	08007445 	.word	0x08007445

08006b64 <__sfputc_r>:
 8006b64:	6893      	ldr	r3, [r2, #8]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	b410      	push	{r4}
 8006b6c:	6093      	str	r3, [r2, #8]
 8006b6e:	da08      	bge.n	8006b82 <__sfputc_r+0x1e>
 8006b70:	6994      	ldr	r4, [r2, #24]
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	db01      	blt.n	8006b7a <__sfputc_r+0x16>
 8006b76:	290a      	cmp	r1, #10
 8006b78:	d103      	bne.n	8006b82 <__sfputc_r+0x1e>
 8006b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b7e:	f000 b9e3 	b.w	8006f48 <__swbuf_r>
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	1c58      	adds	r0, r3, #1
 8006b86:	6010      	str	r0, [r2, #0]
 8006b88:	7019      	strb	r1, [r3, #0]
 8006b8a:	4608      	mov	r0, r1
 8006b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <__sfputs_r>:
 8006b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b94:	4606      	mov	r6, r0
 8006b96:	460f      	mov	r7, r1
 8006b98:	4614      	mov	r4, r2
 8006b9a:	18d5      	adds	r5, r2, r3
 8006b9c:	42ac      	cmp	r4, r5
 8006b9e:	d101      	bne.n	8006ba4 <__sfputs_r+0x12>
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e007      	b.n	8006bb4 <__sfputs_r+0x22>
 8006ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba8:	463a      	mov	r2, r7
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7ff ffda 	bl	8006b64 <__sfputc_r>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d1f3      	bne.n	8006b9c <__sfputs_r+0xa>
 8006bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bb8 <_vfiprintf_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	460d      	mov	r5, r1
 8006bbe:	b09d      	sub	sp, #116	; 0x74
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	4698      	mov	r8, r3
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	b118      	cbz	r0, 8006bd0 <_vfiprintf_r+0x18>
 8006bc8:	6a03      	ldr	r3, [r0, #32]
 8006bca:	b90b      	cbnz	r3, 8006bd0 <_vfiprintf_r+0x18>
 8006bcc:	f7fe fbc8 	bl	8005360 <__sinit>
 8006bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd2:	07d9      	lsls	r1, r3, #31
 8006bd4:	d405      	bmi.n	8006be2 <_vfiprintf_r+0x2a>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	059a      	lsls	r2, r3, #22
 8006bda:	d402      	bmi.n	8006be2 <_vfiprintf_r+0x2a>
 8006bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bde:	f7fe fcc7 	bl	8005570 <__retarget_lock_acquire_recursive>
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	d501      	bpl.n	8006bec <_vfiprintf_r+0x34>
 8006be8:	692b      	ldr	r3, [r5, #16]
 8006bea:	b99b      	cbnz	r3, 8006c14 <_vfiprintf_r+0x5c>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f9e8 	bl	8006fc4 <__swsetup_r>
 8006bf4:	b170      	cbz	r0, 8006c14 <_vfiprintf_r+0x5c>
 8006bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf8:	07dc      	lsls	r4, r3, #31
 8006bfa:	d504      	bpl.n	8006c06 <_vfiprintf_r+0x4e>
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	b01d      	add	sp, #116	; 0x74
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	89ab      	ldrh	r3, [r5, #12]
 8006c08:	0598      	lsls	r0, r3, #22
 8006c0a:	d4f7      	bmi.n	8006bfc <_vfiprintf_r+0x44>
 8006c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c0e:	f7fe fcb0 	bl	8005572 <__retarget_lock_release_recursive>
 8006c12:	e7f3      	b.n	8006bfc <_vfiprintf_r+0x44>
 8006c14:	2300      	movs	r3, #0
 8006c16:	9309      	str	r3, [sp, #36]	; 0x24
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c22:	2330      	movs	r3, #48	; 0x30
 8006c24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006dd8 <_vfiprintf_r+0x220>
 8006c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c2c:	f04f 0901 	mov.w	r9, #1
 8006c30:	4623      	mov	r3, r4
 8006c32:	469a      	mov	sl, r3
 8006c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c38:	b10a      	cbz	r2, 8006c3e <_vfiprintf_r+0x86>
 8006c3a:	2a25      	cmp	r2, #37	; 0x25
 8006c3c:	d1f9      	bne.n	8006c32 <_vfiprintf_r+0x7a>
 8006c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c42:	d00b      	beq.n	8006c5c <_vfiprintf_r+0xa4>
 8006c44:	465b      	mov	r3, fp
 8006c46:	4622      	mov	r2, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7ff ffa1 	bl	8006b92 <__sfputs_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	f000 80a9 	beq.w	8006da8 <_vfiprintf_r+0x1f0>
 8006c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c58:	445a      	add	r2, fp
 8006c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80a1 	beq.w	8006da8 <_vfiprintf_r+0x1f0>
 8006c66:	2300      	movs	r3, #0
 8006c68:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c70:	f10a 0a01 	add.w	sl, sl, #1
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	9307      	str	r3, [sp, #28]
 8006c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c7e:	4654      	mov	r4, sl
 8006c80:	2205      	movs	r2, #5
 8006c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c86:	4854      	ldr	r0, [pc, #336]	; (8006dd8 <_vfiprintf_r+0x220>)
 8006c88:	f7f9 faa2 	bl	80001d0 <memchr>
 8006c8c:	9a04      	ldr	r2, [sp, #16]
 8006c8e:	b9d8      	cbnz	r0, 8006cc8 <_vfiprintf_r+0x110>
 8006c90:	06d1      	lsls	r1, r2, #27
 8006c92:	bf44      	itt	mi
 8006c94:	2320      	movmi	r3, #32
 8006c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9a:	0713      	lsls	r3, r2, #28
 8006c9c:	bf44      	itt	mi
 8006c9e:	232b      	movmi	r3, #43	; 0x2b
 8006ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8006caa:	d015      	beq.n	8006cd8 <_vfiprintf_r+0x120>
 8006cac:	9a07      	ldr	r2, [sp, #28]
 8006cae:	4654      	mov	r4, sl
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f04f 0c0a 	mov.w	ip, #10
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cbc:	3b30      	subs	r3, #48	; 0x30
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d94d      	bls.n	8006d5e <_vfiprintf_r+0x1a6>
 8006cc2:	b1b0      	cbz	r0, 8006cf2 <_vfiprintf_r+0x13a>
 8006cc4:	9207      	str	r2, [sp, #28]
 8006cc6:	e014      	b.n	8006cf2 <_vfiprintf_r+0x13a>
 8006cc8:	eba0 0308 	sub.w	r3, r0, r8
 8006ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	46a2      	mov	sl, r4
 8006cd6:	e7d2      	b.n	8006c7e <_vfiprintf_r+0xc6>
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	1d19      	adds	r1, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	9103      	str	r1, [sp, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bfbb      	ittet	lt
 8006ce4:	425b      	neglt	r3, r3
 8006ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cea:	9307      	strge	r3, [sp, #28]
 8006cec:	9307      	strlt	r3, [sp, #28]
 8006cee:	bfb8      	it	lt
 8006cf0:	9204      	strlt	r2, [sp, #16]
 8006cf2:	7823      	ldrb	r3, [r4, #0]
 8006cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8006cf6:	d10c      	bne.n	8006d12 <_vfiprintf_r+0x15a>
 8006cf8:	7863      	ldrb	r3, [r4, #1]
 8006cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfc:	d134      	bne.n	8006d68 <_vfiprintf_r+0x1b0>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	1d1a      	adds	r2, r3, #4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	9203      	str	r2, [sp, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfb8      	it	lt
 8006d0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d0e:	3402      	adds	r4, #2
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006de8 <_vfiprintf_r+0x230>
 8006d16:	7821      	ldrb	r1, [r4, #0]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	f7f9 fa58 	bl	80001d0 <memchr>
 8006d20:	b138      	cbz	r0, 8006d32 <_vfiprintf_r+0x17a>
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	eba0 000a 	sub.w	r0, r0, sl
 8006d28:	2240      	movs	r2, #64	; 0x40
 8006d2a:	4082      	lsls	r2, r0
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	3401      	adds	r4, #1
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d36:	4829      	ldr	r0, [pc, #164]	; (8006ddc <_vfiprintf_r+0x224>)
 8006d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d3c:	2206      	movs	r2, #6
 8006d3e:	f7f9 fa47 	bl	80001d0 <memchr>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d03f      	beq.n	8006dc6 <_vfiprintf_r+0x20e>
 8006d46:	4b26      	ldr	r3, [pc, #152]	; (8006de0 <_vfiprintf_r+0x228>)
 8006d48:	bb1b      	cbnz	r3, 8006d92 <_vfiprintf_r+0x1da>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	3308      	adds	r3, #8
 8006d54:	9303      	str	r3, [sp, #12]
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	443b      	add	r3, r7
 8006d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5c:	e768      	b.n	8006c30 <_vfiprintf_r+0x78>
 8006d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d62:	460c      	mov	r4, r1
 8006d64:	2001      	movs	r0, #1
 8006d66:	e7a6      	b.n	8006cb6 <_vfiprintf_r+0xfe>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	3401      	adds	r4, #1
 8006d6c:	9305      	str	r3, [sp, #20]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f04f 0c0a 	mov.w	ip, #10
 8006d74:	4620      	mov	r0, r4
 8006d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d7a:	3a30      	subs	r2, #48	; 0x30
 8006d7c:	2a09      	cmp	r2, #9
 8006d7e:	d903      	bls.n	8006d88 <_vfiprintf_r+0x1d0>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0c6      	beq.n	8006d12 <_vfiprintf_r+0x15a>
 8006d84:	9105      	str	r1, [sp, #20]
 8006d86:	e7c4      	b.n	8006d12 <_vfiprintf_r+0x15a>
 8006d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e7f0      	b.n	8006d74 <_vfiprintf_r+0x1bc>
 8006d92:	ab03      	add	r3, sp, #12
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	462a      	mov	r2, r5
 8006d98:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <_vfiprintf_r+0x22c>)
 8006d9a:	a904      	add	r1, sp, #16
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7fd fe9f 	bl	8004ae0 <_printf_float>
 8006da2:	4607      	mov	r7, r0
 8006da4:	1c78      	adds	r0, r7, #1
 8006da6:	d1d6      	bne.n	8006d56 <_vfiprintf_r+0x19e>
 8006da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006daa:	07d9      	lsls	r1, r3, #31
 8006dac:	d405      	bmi.n	8006dba <_vfiprintf_r+0x202>
 8006dae:	89ab      	ldrh	r3, [r5, #12]
 8006db0:	059a      	lsls	r2, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_vfiprintf_r+0x202>
 8006db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006db6:	f7fe fbdc 	bl	8005572 <__retarget_lock_release_recursive>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	065b      	lsls	r3, r3, #25
 8006dbe:	f53f af1d 	bmi.w	8006bfc <_vfiprintf_r+0x44>
 8006dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc4:	e71c      	b.n	8006c00 <_vfiprintf_r+0x48>
 8006dc6:	ab03      	add	r3, sp, #12
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	462a      	mov	r2, r5
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <_vfiprintf_r+0x22c>)
 8006dce:	a904      	add	r1, sp, #16
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7fe f929 	bl	8005028 <_printf_i>
 8006dd6:	e7e4      	b.n	8006da2 <_vfiprintf_r+0x1ea>
 8006dd8:	0800759c 	.word	0x0800759c
 8006ddc:	080075a6 	.word	0x080075a6
 8006de0:	08004ae1 	.word	0x08004ae1
 8006de4:	08006b93 	.word	0x08006b93
 8006de8:	080075a2 	.word	0x080075a2

08006dec <__sflush_r>:
 8006dec:	898a      	ldrh	r2, [r1, #12]
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	4605      	mov	r5, r0
 8006df4:	0710      	lsls	r0, r2, #28
 8006df6:	460c      	mov	r4, r1
 8006df8:	d458      	bmi.n	8006eac <__sflush_r+0xc0>
 8006dfa:	684b      	ldr	r3, [r1, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dc05      	bgt.n	8006e0c <__sflush_r+0x20>
 8006e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dc02      	bgt.n	8006e0c <__sflush_r+0x20>
 8006e06:	2000      	movs	r0, #0
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d0f9      	beq.n	8006e06 <__sflush_r+0x1a>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e18:	682f      	ldr	r7, [r5, #0]
 8006e1a:	6a21      	ldr	r1, [r4, #32]
 8006e1c:	602b      	str	r3, [r5, #0]
 8006e1e:	d032      	beq.n	8006e86 <__sflush_r+0x9a>
 8006e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	075a      	lsls	r2, r3, #29
 8006e26:	d505      	bpl.n	8006e34 <__sflush_r+0x48>
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	1ac0      	subs	r0, r0, r3
 8006e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e2e:	b10b      	cbz	r3, 8006e34 <__sflush_r+0x48>
 8006e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e32:	1ac0      	subs	r0, r0, r3
 8006e34:	2300      	movs	r3, #0
 8006e36:	4602      	mov	r2, r0
 8006e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3a:	6a21      	ldr	r1, [r4, #32]
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b0      	blx	r6
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	d106      	bne.n	8006e54 <__sflush_r+0x68>
 8006e46:	6829      	ldr	r1, [r5, #0]
 8006e48:	291d      	cmp	r1, #29
 8006e4a:	d82b      	bhi.n	8006ea4 <__sflush_r+0xb8>
 8006e4c:	4a29      	ldr	r2, [pc, #164]	; (8006ef4 <__sflush_r+0x108>)
 8006e4e:	410a      	asrs	r2, r1
 8006e50:	07d6      	lsls	r6, r2, #31
 8006e52:	d427      	bmi.n	8006ea4 <__sflush_r+0xb8>
 8006e54:	2200      	movs	r2, #0
 8006e56:	6062      	str	r2, [r4, #4]
 8006e58:	04d9      	lsls	r1, r3, #19
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	d504      	bpl.n	8006e6a <__sflush_r+0x7e>
 8006e60:	1c42      	adds	r2, r0, #1
 8006e62:	d101      	bne.n	8006e68 <__sflush_r+0x7c>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b903      	cbnz	r3, 8006e6a <__sflush_r+0x7e>
 8006e68:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6c:	602f      	str	r7, [r5, #0]
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d0c9      	beq.n	8006e06 <__sflush_r+0x1a>
 8006e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e76:	4299      	cmp	r1, r3
 8006e78:	d002      	beq.n	8006e80 <__sflush_r+0x94>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f7ff f9f6 	bl	800626c <_free_r>
 8006e80:	2000      	movs	r0, #0
 8006e82:	6360      	str	r0, [r4, #52]	; 0x34
 8006e84:	e7c0      	b.n	8006e08 <__sflush_r+0x1c>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b0      	blx	r6
 8006e8c:	1c41      	adds	r1, r0, #1
 8006e8e:	d1c8      	bne.n	8006e22 <__sflush_r+0x36>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c5      	beq.n	8006e22 <__sflush_r+0x36>
 8006e96:	2b1d      	cmp	r3, #29
 8006e98:	d001      	beq.n	8006e9e <__sflush_r+0xb2>
 8006e9a:	2b16      	cmp	r3, #22
 8006e9c:	d101      	bne.n	8006ea2 <__sflush_r+0xb6>
 8006e9e:	602f      	str	r7, [r5, #0]
 8006ea0:	e7b1      	b.n	8006e06 <__sflush_r+0x1a>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	e7ad      	b.n	8006e08 <__sflush_r+0x1c>
 8006eac:	690f      	ldr	r7, [r1, #16]
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	d0a9      	beq.n	8006e06 <__sflush_r+0x1a>
 8006eb2:	0793      	lsls	r3, r2, #30
 8006eb4:	680e      	ldr	r6, [r1, #0]
 8006eb6:	bf08      	it	eq
 8006eb8:	694b      	ldreq	r3, [r1, #20]
 8006eba:	600f      	str	r7, [r1, #0]
 8006ebc:	bf18      	it	ne
 8006ebe:	2300      	movne	r3, #0
 8006ec0:	eba6 0807 	sub.w	r8, r6, r7
 8006ec4:	608b      	str	r3, [r1, #8]
 8006ec6:	f1b8 0f00 	cmp.w	r8, #0
 8006eca:	dd9c      	ble.n	8006e06 <__sflush_r+0x1a>
 8006ecc:	6a21      	ldr	r1, [r4, #32]
 8006ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed0:	4643      	mov	r3, r8
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b0      	blx	r6
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dc06      	bgt.n	8006eea <__sflush_r+0xfe>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	e78e      	b.n	8006e08 <__sflush_r+0x1c>
 8006eea:	4407      	add	r7, r0
 8006eec:	eba8 0800 	sub.w	r8, r8, r0
 8006ef0:	e7e9      	b.n	8006ec6 <__sflush_r+0xda>
 8006ef2:	bf00      	nop
 8006ef4:	dfbffffe 	.word	0xdfbffffe

08006ef8 <_fflush_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	690b      	ldr	r3, [r1, #16]
 8006efc:	4605      	mov	r5, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	b913      	cbnz	r3, 8006f08 <_fflush_r+0x10>
 8006f02:	2500      	movs	r5, #0
 8006f04:	4628      	mov	r0, r5
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	b118      	cbz	r0, 8006f12 <_fflush_r+0x1a>
 8006f0a:	6a03      	ldr	r3, [r0, #32]
 8006f0c:	b90b      	cbnz	r3, 8006f12 <_fflush_r+0x1a>
 8006f0e:	f7fe fa27 	bl	8005360 <__sinit>
 8006f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f3      	beq.n	8006f02 <_fflush_r+0xa>
 8006f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f1c:	07d0      	lsls	r0, r2, #31
 8006f1e:	d404      	bmi.n	8006f2a <_fflush_r+0x32>
 8006f20:	0599      	lsls	r1, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_fflush_r+0x32>
 8006f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f26:	f7fe fb23 	bl	8005570 <__retarget_lock_acquire_recursive>
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	f7ff ff5d 	bl	8006dec <__sflush_r>
 8006f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f34:	07da      	lsls	r2, r3, #31
 8006f36:	4605      	mov	r5, r0
 8006f38:	d4e4      	bmi.n	8006f04 <_fflush_r+0xc>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	059b      	lsls	r3, r3, #22
 8006f3e:	d4e1      	bmi.n	8006f04 <_fflush_r+0xc>
 8006f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f42:	f7fe fb16 	bl	8005572 <__retarget_lock_release_recursive>
 8006f46:	e7dd      	b.n	8006f04 <_fflush_r+0xc>

08006f48 <__swbuf_r>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b118      	cbz	r0, 8006f5a <__swbuf_r+0x12>
 8006f52:	6a03      	ldr	r3, [r0, #32]
 8006f54:	b90b      	cbnz	r3, 8006f5a <__swbuf_r+0x12>
 8006f56:	f7fe fa03 	bl	8005360 <__sinit>
 8006f5a:	69a3      	ldr	r3, [r4, #24]
 8006f5c:	60a3      	str	r3, [r4, #8]
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	071a      	lsls	r2, r3, #28
 8006f62:	d525      	bpl.n	8006fb0 <__swbuf_r+0x68>
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	b31b      	cbz	r3, 8006fb0 <__swbuf_r+0x68>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	1a98      	subs	r0, r3, r2
 8006f6e:	6963      	ldr	r3, [r4, #20]
 8006f70:	b2f6      	uxtb	r6, r6
 8006f72:	4283      	cmp	r3, r0
 8006f74:	4637      	mov	r7, r6
 8006f76:	dc04      	bgt.n	8006f82 <__swbuf_r+0x3a>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7ff ffbc 	bl	8006ef8 <_fflush_r>
 8006f80:	b9e0      	cbnz	r0, 8006fbc <__swbuf_r+0x74>
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	6022      	str	r2, [r4, #0]
 8006f8e:	701e      	strb	r6, [r3, #0]
 8006f90:	6962      	ldr	r2, [r4, #20]
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d004      	beq.n	8006fa2 <__swbuf_r+0x5a>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	07db      	lsls	r3, r3, #31
 8006f9c:	d506      	bpl.n	8006fac <__swbuf_r+0x64>
 8006f9e:	2e0a      	cmp	r6, #10
 8006fa0:	d104      	bne.n	8006fac <__swbuf_r+0x64>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7ff ffa7 	bl	8006ef8 <_fflush_r>
 8006faa:	b938      	cbnz	r0, 8006fbc <__swbuf_r+0x74>
 8006fac:	4638      	mov	r0, r7
 8006fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f806 	bl	8006fc4 <__swsetup_r>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d0d5      	beq.n	8006f68 <__swbuf_r+0x20>
 8006fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8006fc0:	e7f4      	b.n	8006fac <__swbuf_r+0x64>
	...

08006fc4 <__swsetup_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <__swsetup_r+0xac>)
 8006fc8:	4605      	mov	r5, r0
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	460c      	mov	r4, r1
 8006fce:	b118      	cbz	r0, 8006fd8 <__swsetup_r+0x14>
 8006fd0:	6a03      	ldr	r3, [r0, #32]
 8006fd2:	b90b      	cbnz	r3, 8006fd8 <__swsetup_r+0x14>
 8006fd4:	f7fe f9c4 	bl	8005360 <__sinit>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fde:	0718      	lsls	r0, r3, #28
 8006fe0:	d422      	bmi.n	8007028 <__swsetup_r+0x64>
 8006fe2:	06d9      	lsls	r1, r3, #27
 8006fe4:	d407      	bmi.n	8006ff6 <__swsetup_r+0x32>
 8006fe6:	2309      	movs	r3, #9
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e034      	b.n	8007060 <__swsetup_r+0x9c>
 8006ff6:	0758      	lsls	r0, r3, #29
 8006ff8:	d512      	bpl.n	8007020 <__swsetup_r+0x5c>
 8006ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ffc:	b141      	cbz	r1, 8007010 <__swsetup_r+0x4c>
 8006ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007002:	4299      	cmp	r1, r3
 8007004:	d002      	beq.n	800700c <__swsetup_r+0x48>
 8007006:	4628      	mov	r0, r5
 8007008:	f7ff f930 	bl	800626c <_free_r>
 800700c:	2300      	movs	r3, #0
 800700e:	6363      	str	r3, [r4, #52]	; 0x34
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	2300      	movs	r3, #0
 800701a:	6063      	str	r3, [r4, #4]
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	f043 0308 	orr.w	r3, r3, #8
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	b94b      	cbnz	r3, 8007040 <__swsetup_r+0x7c>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d003      	beq.n	8007040 <__swsetup_r+0x7c>
 8007038:	4621      	mov	r1, r4
 800703a:	4628      	mov	r0, r5
 800703c:	f000 f8c4 	bl	80071c8 <__smakebuf_r>
 8007040:	89a0      	ldrh	r0, [r4, #12]
 8007042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007046:	f010 0301 	ands.w	r3, r0, #1
 800704a:	d00a      	beq.n	8007062 <__swsetup_r+0x9e>
 800704c:	2300      	movs	r3, #0
 800704e:	60a3      	str	r3, [r4, #8]
 8007050:	6963      	ldr	r3, [r4, #20]
 8007052:	425b      	negs	r3, r3
 8007054:	61a3      	str	r3, [r4, #24]
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	b943      	cbnz	r3, 800706c <__swsetup_r+0xa8>
 800705a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800705e:	d1c4      	bne.n	8006fea <__swsetup_r+0x26>
 8007060:	bd38      	pop	{r3, r4, r5, pc}
 8007062:	0781      	lsls	r1, r0, #30
 8007064:	bf58      	it	pl
 8007066:	6963      	ldrpl	r3, [r4, #20]
 8007068:	60a3      	str	r3, [r4, #8]
 800706a:	e7f4      	b.n	8007056 <__swsetup_r+0x92>
 800706c:	2000      	movs	r0, #0
 800706e:	e7f7      	b.n	8007060 <__swsetup_r+0x9c>
 8007070:	20000068 	.word	0x20000068

08007074 <_sbrk_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	; (8007090 <_sbrk_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fa f882 	bl	8001188 <_sbrk>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_sbrk_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_sbrk_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000764 	.word	0x20000764

08007094 <memcpy>:
 8007094:	440a      	add	r2, r1
 8007096:	4291      	cmp	r1, r2
 8007098:	f100 33ff 	add.w	r3, r0, #4294967295
 800709c:	d100      	bne.n	80070a0 <memcpy+0xc>
 800709e:	4770      	bx	lr
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	4291      	cmp	r1, r2
 80070ac:	d1f9      	bne.n	80070a2 <memcpy+0xe>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <__assert_func>:
 80070b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070b2:	4614      	mov	r4, r2
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <__assert_func+0x2c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4605      	mov	r5, r0
 80070bc:	68d8      	ldr	r0, [r3, #12]
 80070be:	b14c      	cbz	r4, 80070d4 <__assert_func+0x24>
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <__assert_func+0x30>)
 80070c2:	9100      	str	r1, [sp, #0]
 80070c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070c8:	4906      	ldr	r1, [pc, #24]	; (80070e4 <__assert_func+0x34>)
 80070ca:	462b      	mov	r3, r5
 80070cc:	f000 f844 	bl	8007158 <fiprintf>
 80070d0:	f000 f8d8 	bl	8007284 <abort>
 80070d4:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <__assert_func+0x38>)
 80070d6:	461c      	mov	r4, r3
 80070d8:	e7f3      	b.n	80070c2 <__assert_func+0x12>
 80070da:	bf00      	nop
 80070dc:	20000068 	.word	0x20000068
 80070e0:	080075b7 	.word	0x080075b7
 80070e4:	080075c4 	.word	0x080075c4
 80070e8:	080075f2 	.word	0x080075f2

080070ec <_calloc_r>:
 80070ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ee:	fba1 2402 	umull	r2, r4, r1, r2
 80070f2:	b94c      	cbnz	r4, 8007108 <_calloc_r+0x1c>
 80070f4:	4611      	mov	r1, r2
 80070f6:	9201      	str	r2, [sp, #4]
 80070f8:	f7ff f92c 	bl	8006354 <_malloc_r>
 80070fc:	9a01      	ldr	r2, [sp, #4]
 80070fe:	4605      	mov	r5, r0
 8007100:	b930      	cbnz	r0, 8007110 <_calloc_r+0x24>
 8007102:	4628      	mov	r0, r5
 8007104:	b003      	add	sp, #12
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	220c      	movs	r2, #12
 800710a:	6002      	str	r2, [r0, #0]
 800710c:	2500      	movs	r5, #0
 800710e:	e7f8      	b.n	8007102 <_calloc_r+0x16>
 8007110:	4621      	mov	r1, r4
 8007112:	f7fe f9b0 	bl	8005476 <memset>
 8007116:	e7f4      	b.n	8007102 <_calloc_r+0x16>

08007118 <__ascii_mbtowc>:
 8007118:	b082      	sub	sp, #8
 800711a:	b901      	cbnz	r1, 800711e <__ascii_mbtowc+0x6>
 800711c:	a901      	add	r1, sp, #4
 800711e:	b142      	cbz	r2, 8007132 <__ascii_mbtowc+0x1a>
 8007120:	b14b      	cbz	r3, 8007136 <__ascii_mbtowc+0x1e>
 8007122:	7813      	ldrb	r3, [r2, #0]
 8007124:	600b      	str	r3, [r1, #0]
 8007126:	7812      	ldrb	r2, [r2, #0]
 8007128:	1e10      	subs	r0, r2, #0
 800712a:	bf18      	it	ne
 800712c:	2001      	movne	r0, #1
 800712e:	b002      	add	sp, #8
 8007130:	4770      	bx	lr
 8007132:	4610      	mov	r0, r2
 8007134:	e7fb      	b.n	800712e <__ascii_mbtowc+0x16>
 8007136:	f06f 0001 	mvn.w	r0, #1
 800713a:	e7f8      	b.n	800712e <__ascii_mbtowc+0x16>

0800713c <__ascii_wctomb>:
 800713c:	b149      	cbz	r1, 8007152 <__ascii_wctomb+0x16>
 800713e:	2aff      	cmp	r2, #255	; 0xff
 8007140:	bf85      	ittet	hi
 8007142:	238a      	movhi	r3, #138	; 0x8a
 8007144:	6003      	strhi	r3, [r0, #0]
 8007146:	700a      	strbls	r2, [r1, #0]
 8007148:	f04f 30ff 	movhi.w	r0, #4294967295
 800714c:	bf98      	it	ls
 800714e:	2001      	movls	r0, #1
 8007150:	4770      	bx	lr
 8007152:	4608      	mov	r0, r1
 8007154:	4770      	bx	lr
	...

08007158 <fiprintf>:
 8007158:	b40e      	push	{r1, r2, r3}
 800715a:	b503      	push	{r0, r1, lr}
 800715c:	4601      	mov	r1, r0
 800715e:	ab03      	add	r3, sp, #12
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <fiprintf+0x20>)
 8007162:	f853 2b04 	ldr.w	r2, [r3], #4
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f7ff fd25 	bl	8006bb8 <_vfiprintf_r>
 800716e:	b002      	add	sp, #8
 8007170:	f85d eb04 	ldr.w	lr, [sp], #4
 8007174:	b003      	add	sp, #12
 8007176:	4770      	bx	lr
 8007178:	20000068 	.word	0x20000068

0800717c <__swhatbuf_r>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	460c      	mov	r4, r1
 8007180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007184:	2900      	cmp	r1, #0
 8007186:	b096      	sub	sp, #88	; 0x58
 8007188:	4615      	mov	r5, r2
 800718a:	461e      	mov	r6, r3
 800718c:	da0d      	bge.n	80071aa <__swhatbuf_r+0x2e>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007194:	f04f 0100 	mov.w	r1, #0
 8007198:	bf0c      	ite	eq
 800719a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800719e:	2340      	movne	r3, #64	; 0x40
 80071a0:	2000      	movs	r0, #0
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	b016      	add	sp, #88	; 0x58
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	466a      	mov	r2, sp
 80071ac:	f000 f848 	bl	8007240 <_fstat_r>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	dbec      	blt.n	800718e <__swhatbuf_r+0x12>
 80071b4:	9901      	ldr	r1, [sp, #4]
 80071b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071be:	4259      	negs	r1, r3
 80071c0:	4159      	adcs	r1, r3
 80071c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071c6:	e7eb      	b.n	80071a0 <__swhatbuf_r+0x24>

080071c8 <__smakebuf_r>:
 80071c8:	898b      	ldrh	r3, [r1, #12]
 80071ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071cc:	079d      	lsls	r5, r3, #30
 80071ce:	4606      	mov	r6, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	d507      	bpl.n	80071e4 <__smakebuf_r+0x1c>
 80071d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	2301      	movs	r3, #1
 80071de:	6163      	str	r3, [r4, #20]
 80071e0:	b002      	add	sp, #8
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	ab01      	add	r3, sp, #4
 80071e6:	466a      	mov	r2, sp
 80071e8:	f7ff ffc8 	bl	800717c <__swhatbuf_r>
 80071ec:	9900      	ldr	r1, [sp, #0]
 80071ee:	4605      	mov	r5, r0
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff f8af 	bl	8006354 <_malloc_r>
 80071f6:	b948      	cbnz	r0, 800720c <__smakebuf_r+0x44>
 80071f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fc:	059a      	lsls	r2, r3, #22
 80071fe:	d4ef      	bmi.n	80071e0 <__smakebuf_r+0x18>
 8007200:	f023 0303 	bic.w	r3, r3, #3
 8007204:	f043 0302 	orr.w	r3, r3, #2
 8007208:	81a3      	strh	r3, [r4, #12]
 800720a:	e7e3      	b.n	80071d4 <__smakebuf_r+0xc>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	6020      	str	r0, [r4, #0]
 8007210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007214:	81a3      	strh	r3, [r4, #12]
 8007216:	9b00      	ldr	r3, [sp, #0]
 8007218:	6163      	str	r3, [r4, #20]
 800721a:	9b01      	ldr	r3, [sp, #4]
 800721c:	6120      	str	r0, [r4, #16]
 800721e:	b15b      	cbz	r3, 8007238 <__smakebuf_r+0x70>
 8007220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f81d 	bl	8007264 <_isatty_r>
 800722a:	b128      	cbz	r0, 8007238 <__smakebuf_r+0x70>
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	431d      	orrs	r5, r3
 800723c:	81a5      	strh	r5, [r4, #12]
 800723e:	e7cf      	b.n	80071e0 <__smakebuf_r+0x18>

08007240 <_fstat_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	; (8007260 <_fstat_r+0x20>)
 8007244:	2300      	movs	r3, #0
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	602b      	str	r3, [r5, #0]
 800724e:	f7f9 ff72 	bl	8001136 <_fstat>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d102      	bne.n	800725c <_fstat_r+0x1c>
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	b103      	cbz	r3, 800725c <_fstat_r+0x1c>
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	bf00      	nop
 8007260:	20000764 	.word	0x20000764

08007264 <_isatty_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d06      	ldr	r5, [pc, #24]	; (8007280 <_isatty_r+0x1c>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	f7f9 ff71 	bl	8001156 <_isatty>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_isatty_r+0x1a>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_isatty_r+0x1a>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20000764 	.word	0x20000764

08007284 <abort>:
 8007284:	b508      	push	{r3, lr}
 8007286:	2006      	movs	r0, #6
 8007288:	f000 f82c 	bl	80072e4 <raise>
 800728c:	2001      	movs	r0, #1
 800728e:	f7f9 ff1f 	bl	80010d0 <_exit>

08007292 <_raise_r>:
 8007292:	291f      	cmp	r1, #31
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4604      	mov	r4, r0
 8007298:	460d      	mov	r5, r1
 800729a:	d904      	bls.n	80072a6 <_raise_r+0x14>
 800729c:	2316      	movs	r3, #22
 800729e:	6003      	str	r3, [r0, #0]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80072a8:	b112      	cbz	r2, 80072b0 <_raise_r+0x1e>
 80072aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072ae:	b94b      	cbnz	r3, 80072c4 <_raise_r+0x32>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f831 	bl	8007318 <_getpid_r>
 80072b6:	462a      	mov	r2, r5
 80072b8:	4601      	mov	r1, r0
 80072ba:	4620      	mov	r0, r4
 80072bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c0:	f000 b818 	b.w	80072f4 <_kill_r>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d00a      	beq.n	80072de <_raise_r+0x4c>
 80072c8:	1c59      	adds	r1, r3, #1
 80072ca:	d103      	bne.n	80072d4 <_raise_r+0x42>
 80072cc:	2316      	movs	r3, #22
 80072ce:	6003      	str	r3, [r0, #0]
 80072d0:	2001      	movs	r0, #1
 80072d2:	e7e7      	b.n	80072a4 <_raise_r+0x12>
 80072d4:	2400      	movs	r4, #0
 80072d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072da:	4628      	mov	r0, r5
 80072dc:	4798      	blx	r3
 80072de:	2000      	movs	r0, #0
 80072e0:	e7e0      	b.n	80072a4 <_raise_r+0x12>
	...

080072e4 <raise>:
 80072e4:	4b02      	ldr	r3, [pc, #8]	; (80072f0 <raise+0xc>)
 80072e6:	4601      	mov	r1, r0
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	f7ff bfd2 	b.w	8007292 <_raise_r>
 80072ee:	bf00      	nop
 80072f0:	20000068 	.word	0x20000068

080072f4 <_kill_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	; (8007314 <_kill_r+0x20>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	f7f9 fed5 	bl	80010b0 <_kill>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	d102      	bne.n	8007310 <_kill_r+0x1c>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	b103      	cbz	r3, 8007310 <_kill_r+0x1c>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	20000764 	.word	0x20000764

08007318 <_getpid_r>:
 8007318:	f7f9 bec2 	b.w	80010a0 <_getpid>

0800731c <_init>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr

08007328 <_fini>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	bf00      	nop
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr
